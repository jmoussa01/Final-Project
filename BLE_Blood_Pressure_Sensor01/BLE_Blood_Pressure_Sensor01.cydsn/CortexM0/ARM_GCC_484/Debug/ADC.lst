ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_offset,2,4
  24              		.comm	ADC_countsPer10Volt,4,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_channelsConfig, %object
  28              		.size	ADC_channelsConfig, 4
  29              	ADC_channelsConfig:
  30 0000 00040000 		.word	1024
  31              		.section	.text.ADC_Start,"ax",%progbits
  32              		.align	2
  33              		.global	ADC_Start
  34              		.code	16
  35              		.thumb_func
  36              		.type	ADC_Start, %function
  37              	ADC_Start:
  38              	.LFB2:
  39              		.file 1 ".\\Generated_Source\\PSoC4\\ADC.c"
   1:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:.\Generated_Source\PSoC4/ADC.c **** * Version 2.10
   4:.\Generated_Source\PSoC4/ADC.c **** *
   5:.\Generated_Source\PSoC4/ADC.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC.c **** *
   9:.\Generated_Source\PSoC4/ADC.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC.c **** *
  11:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC.c **** 
  18:.\Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 2


  19:.\Generated_Source\PSoC4/ADC.c **** 
  20:.\Generated_Source\PSoC4/ADC.c **** 
  21:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:.\Generated_Source\PSoC4/ADC.c **** 
  28:.\Generated_Source\PSoC4/ADC.c **** 
  29:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000400u };
  34:.\Generated_Source\PSoC4/ADC.c **** 
  35:.\Generated_Source\PSoC4/ADC.c **** 
  36:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC.c **** *
  40:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC.c **** *
  45:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC.c **** *
  48:.\Generated_Source\PSoC4/ADC.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC.c **** *
  51:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:.\Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:.\Generated_Source\PSoC4/ADC.c **** *
  62:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:.\Generated_Source\PSoC4/ADC.c **** {
  40              		.loc 1 64 0
  41              		.cfi_startproc
  42 0000 80B5     		push	{r7, lr}
  43              		.cfi_def_cfa_offset 8
  44              		.cfi_offset 7, -8
  45              		.cfi_offset 14, -4
  46 0002 00AF     		add	r7, sp, #0
  47              		.cfi_def_cfa_register 7
  65:.\Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
  48              		.loc 1 66 0
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 3


  49 0004 064B     		ldr	r3, .L3
  50 0006 1B78     		ldrb	r3, [r3]
  51 0008 002B     		cmp	r3, #0
  52 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC.c ****     {
  68:.\Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  53              		.loc 1 68 0
  54 000c FFF7FEFF 		bl	ADC_Init
  69:.\Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  55              		.loc 1 69 0
  56 0010 034B     		ldr	r3, .L3
  57 0012 0122     		mov	r2, #1
  58 0014 1A70     		strb	r2, [r3]
  59              	.L2:
  70:.\Generated_Source\PSoC4/ADC.c ****     }
  71:.\Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  60              		.loc 1 71 0
  61 0016 FFF7FEFF 		bl	ADC_Enable
  72:.\Generated_Source\PSoC4/ADC.c **** }
  62              		.loc 1 72 0
  63 001a BD46     		mov	sp, r7
  64              		@ sp needed
  65 001c 80BD     		pop	{r7, pc}
  66              	.L4:
  67 001e C046     		.align	2
  68              	.L3:
  69 0020 00000000 		.word	ADC_initVar
  70              		.cfi_endproc
  71              	.LFE2:
  72              		.size	ADC_Start, .-ADC_Start
  73              		.global	__aeabi_idiv
  74              		.section	.text.ADC_Init,"ax",%progbits
  75              		.align	2
  76              		.global	ADC_Init
  77              		.code	16
  78              		.thumb_func
  79              		.type	ADC_Init, %function
  80              	ADC_Init:
  81              	.LFB3:
  73:.\Generated_Source\PSoC4/ADC.c **** 
  74:.\Generated_Source\PSoC4/ADC.c **** 
  75:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC.c **** *
  79:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:.\Generated_Source\PSoC4/ADC.c **** *
  84:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC.c **** *
  87:.\Generated_Source\PSoC4/ADC.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC.c **** *  None.
  89:.\Generated_Source\PSoC4/ADC.c **** *
  90:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 4


  91:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:.\Generated_Source\PSoC4/ADC.c **** *
  93:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:.\Generated_Source\PSoC4/ADC.c **** {
  82              		.loc 1 95 0
  83              		.cfi_startproc
  84 0000 90B5     		push	{r4, r7, lr}
  85              		.cfi_def_cfa_offset 12
  86              		.cfi_offset 4, -12
  87              		.cfi_offset 7, -8
  88              		.cfi_offset 14, -4
  89 0002 85B0     		sub	sp, sp, #20
  90              		.cfi_def_cfa_offset 32
  91 0004 00AF     		add	r7, sp, #0
  92              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC.c **** 
 100:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC.c ****         {
 103:.\Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/ADC.c ****         };
 136:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 5


 137:.\Generated_Source\PSoC4/ADC.c **** 
 138:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 139:.\Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 140:.\Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  93              		.loc 1 140 0
  94 0006 0F20     		mov	r0, #15
  95 0008 0321     		mov	r1, #3
  96 000a FFF7FEFF 		bl	CyIntSetPriority
 141:.\Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  97              		.loc 1 141 0
  98 000e 584B     		ldr	r3, .L17
  99 0010 0F20     		mov	r0, #15
 100 0012 191C     		mov	r1, r3
 101 0014 FFF7FEFF 		bl	CyIntSetVector
 142:.\Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 143:.\Generated_Source\PSoC4/ADC.c **** 
 144:.\Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 145:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 102              		.loc 1 145 0
 103 0018 564B     		ldr	r3, .L17+4
 104 001a 0122     		mov	r2, #1
 105 001c 1A60     		str	r2, [r3]
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 106              		.loc 1 146 0
 107 001e 564B     		ldr	r3, .L17+8
 108 0020 554A     		ldr	r2, .L17+8
 109 0022 1168     		ldr	r1, [r2]
 147:.\Generated_Source\PSoC4/ADC.c ****         /* Enable the SAR internal pump when global pump is enabled */
 148:.\Generated_Source\PSoC4/ADC.c ****         (((ADC_PUMP_CTRL_REG & ADC_PUMP_CTRL_ENABLED) != 0u) ? 
 110              		.loc 1 148 0
 111 0024 554A     		ldr	r2, .L17+12
 112 0026 1268     		ldr	r2, [r2]
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 113              		.loc 1 146 0
 114 0028 002A     		cmp	r2, #0
 115 002a 01DA     		bge	.L6
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 116              		.loc 1 146 0 is_stmt 0 discriminator 1
 117 002c 544A     		ldr	r2, .L17+16
 118 002e 00E0     		b	.L7
 119              	.L6:
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 120              		.loc 1 146 0 discriminator 2
 121 0030 544A     		ldr	r2, .L17+20
 122              	.L7:
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG |= ADC_DEFAULT_CTRL_REG_CFG | 
 123              		.loc 1 146 0 discriminator 3
 124 0032 0A43     		orr	r2, r1
 125 0034 1A60     		str	r2, [r3]
 149:.\Generated_Source\PSoC4/ADC.c ****         ADC_BOOSTPUMP_EN : 0u);
 150:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 126              		.loc 1 150 0 is_stmt 1 discriminator 3
 127 0036 544B     		ldr	r3, .L17+24
 128 0038 544A     		ldr	r2, .L17+28
 129 003a 1A60     		str	r2, [r3]
 151:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 130              		.loc 1 151 0 discriminator 3
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 6


 131 003c 544B     		ldr	r3, .L17+32
 132 003e 554A     		ldr	r2, .L17+36
 133 0040 1A60     		str	r2, [r3]
 152:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 134              		.loc 1 152 0 discriminator 3
 135 0042 554B     		ldr	r3, .L17+40
 136 0044 0022     		mov	r2, #0
 137 0046 1A60     		str	r2, [r3]
 153:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 138              		.loc 1 153 0 discriminator 3
 139 0048 544B     		ldr	r3, .L17+44
 140 004a 554A     		ldr	r2, .L17+48
 141 004c 1A60     		str	r2, [r3]
 154:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 142              		.loc 1 154 0 discriminator 3
 143 004e 554B     		ldr	r3, .L17+52
 144 0050 534A     		ldr	r2, .L17+48
 145 0052 1A60     		str	r2, [r3]
 155:.\Generated_Source\PSoC4/ADC.c ****     
 156:.\Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 157:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 158:.\Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
 146              		.loc 1 158 0 discriminator 3
 147 0054 544B     		ldr	r3, .L17+56
 148 0056 544A     		ldr	r2, .L17+56
 149 0058 1268     		ldr	r2, [r2]
 150 005a 8021     		mov	r1, #128
 151 005c 4902     		lsl	r1, r1, #9
 152 005e 0A43     		orr	r2, r1
 153 0060 1A60     		str	r2, [r3]
 159:.\Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 160:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 161:.\Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 162:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 163:.\Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 164:.\Generated_Source\PSoC4/ADC.c **** 
 165:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 154              		.loc 1 165 0 discriminator 3
 155 0062 524B     		ldr	r3, .L17+60
 156 0064 0022     		mov	r2, #0
 157 0066 1A60     		str	r2, [r3]
 166:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 158              		.loc 1 166 0 discriminator 3
 159 0068 514B     		ldr	r3, .L17+64
 160 006a 0022     		mov	r2, #0
 161 006c 1A60     		str	r2, [r3]
 167:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 162              		.loc 1 167 0 discriminator 3
 163 006e 514B     		ldr	r3, .L17+68
 164 0070 0122     		mov	r2, #1
 165 0072 1A60     		str	r2, [r3]
 168:.\Generated_Source\PSoC4/ADC.c **** 
 169:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 170:.\Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 171:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 172:.\Generated_Source\PSoC4/ADC.c **** 
 173:.\Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 7


 174:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 166              		.loc 1 174 0 discriminator 3
 167 0074 504B     		ldr	r3, .L17+72
 168 0076 1B68     		ldr	r3, [r3]
 169 0078 7B60     		str	r3, [r7, #4]
 175:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 170              		.loc 1 175 0 discriminator 3
 171 007a 7A68     		ldr	r2, [r7, #4]
 172 007c 4F4B     		ldr	r3, .L17+76
 173 007e 1340     		and	r3, r2
 174 0080 7B60     		str	r3, [r7, #4]
 176:.\Generated_Source\PSoC4/ADC.c ****     
 177:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 178:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 179:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 180:.\Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 181:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 182:.\Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 183:.\Generated_Source\PSoC4/ADC.c ****     #else
 184:.\Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 185:.\Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 186:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 187:.\Generated_Source\PSoC4/ADC.c ****         #else
 188:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 175              		.loc 1 188 0 discriminator 3
 176 0082 7B68     		ldr	r3, [r7, #4]
 177 0084 8022     		mov	r2, #128
 178 0086 9205     		lsl	r2, r2, #22
 179 0088 1343     		orr	r3, r2
 180 008a 7B60     		str	r3, [r7, #4]
 189:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 181              		.loc 1 189 0 discriminator 3
 182 008c 7B68     		ldr	r3, [r7, #4]
 183 008e 0122     		mov	r2, #1
 184 0090 9343     		bic	r3, r2
 185 0092 7B60     		str	r3, [r7, #4]
 190:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 191:.\Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 192:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 193:.\Generated_Source\PSoC4/ADC.c ****     
 194:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 186              		.loc 1 194 0 discriminator 3
 187 0094 484B     		ldr	r3, .L17+72
 188 0096 7A68     		ldr	r2, [r7, #4]
 189 0098 1A60     		str	r2, [r3]
 195:.\Generated_Source\PSoC4/ADC.c **** 
 196:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 197:.\Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 198:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 199:.\Generated_Source\PSoC4/ADC.c **** 
 200:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 190              		.loc 1 200 0 discriminator 3
 191 009a 0023     		mov	r3, #0
 192 009c FB60     		str	r3, [r7, #12]
 193 009e 61E0     		b	.L8
 194              	.L16:
 201:.\Generated_Source\PSoC4/ADC.c ****     {
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 8


 202:.\Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 195              		.loc 1 202 0
 196 00a0 8023     		mov	r3, #128
 197 00a2 DA00     		lsl	r2, r3, #3
 198 00a4 DC23     		mov	r3, #220
 199 00a6 9B01     		lsl	r3, r3, #6
 200 00a8 1340     		and	r3, r2
 201 00aa 7B60     		str	r3, [r7, #4]
 203:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 204:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 205:.\Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 206:.\Generated_Source\PSoC4/ADC.c ****         
 207:.\Generated_Source\PSoC4/ADC.c ****         
 208:.\Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 209:.\Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 210:.\Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 211:.\Generated_Source\PSoC4/ADC.c ****         */
 212:.\Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 213:.\Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 214:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 215:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 216:.\Generated_Source\PSoC4/ADC.c **** 
 217:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 218:.\Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 219:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 220:.\Generated_Source\PSoC4/ADC.c ****         {
 221:.\Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 202              		.loc 1 221 0
 203 00ac FB68     		ldr	r3, [r7, #12]
 204 00ae 9B00     		lsl	r3, r3, #2
 205 00b0 434A     		ldr	r2, .L17+80
 206 00b2 9B18     		add	r3, r3, r2
 207 00b4 7A68     		ldr	r2, [r7, #4]
 208 00b6 1A60     		str	r2, [r3]
 222:.\Generated_Source\PSoC4/ADC.c **** 
 223:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 209              		.loc 1 223 0
 210 00b8 8023     		mov	r3, #128
 211 00ba DA00     		lsl	r2, r3, #3
 212 00bc 0123     		mov	r3, #1
 213 00be 1340     		and	r3, r2
 214 00c0 0AD0     		beq	.L9
 224:.\Generated_Source\PSoC4/ADC.c ****             {
 225:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 215              		.loc 1 225 0
 216 00c2 3A4B     		ldr	r3, .L17+60
 217 00c4 394A     		ldr	r2, .L17+60
 218 00c6 1168     		ldr	r1, [r2]
 219 00c8 FA68     		ldr	r2, [r7, #12]
 220 00ca 0120     		mov	r0, #1
 221 00cc 041C     		mov	r4, r0
 222 00ce 9440     		lsl	r4, r4, r2
 223 00d0 221C     		mov	r2, r4
 224 00d2 92B2     		uxth	r2, r2
 225 00d4 0A43     		orr	r2, r1
 226 00d6 1A60     		str	r2, [r3]
 227              	.L9:
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 9


 226:.\Generated_Source\PSoC4/ADC.c ****             }
 227:.\Generated_Source\PSoC4/ADC.c **** 
 228:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 228              		.loc 1 228 0
 229 00d8 8023     		mov	r3, #128
 230 00da DA00     		lsl	r2, r3, #3
 231 00dc 0223     		mov	r3, #2
 232 00de 1340     		and	r3, r2
 233 00e0 0AD0     		beq	.L10
 229:.\Generated_Source\PSoC4/ADC.c ****             {
 230:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 234              		.loc 1 230 0
 235 00e2 334B     		ldr	r3, .L17+64
 236 00e4 324A     		ldr	r2, .L17+64
 237 00e6 1168     		ldr	r1, [r2]
 238 00e8 FA68     		ldr	r2, [r7, #12]
 239 00ea 0120     		mov	r0, #1
 240 00ec 041C     		mov	r4, r0
 241 00ee 9440     		lsl	r4, r4, r2
 242 00f0 221C     		mov	r2, r4
 243 00f2 92B2     		uxth	r2, r2
 244 00f4 0A43     		orr	r2, r1
 245 00f6 1A60     		str	r2, [r3]
 246              	.L10:
 231:.\Generated_Source\PSoC4/ADC.c ****             }
 232:.\Generated_Source\PSoC4/ADC.c ****         }
 233:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 234:.\Generated_Source\PSoC4/ADC.c ****             else
 235:.\Generated_Source\PSoC4/ADC.c ****             {
 236:.\Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 237:.\Generated_Source\PSoC4/ADC.c **** 
 238:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 239:.\Generated_Source\PSoC4/ADC.c ****                 {
 240:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 241:.\Generated_Source\PSoC4/ADC.c ****                 }
 242:.\Generated_Source\PSoC4/ADC.c **** 
 243:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 244:.\Generated_Source\PSoC4/ADC.c ****                 {
 245:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 246:.\Generated_Source\PSoC4/ADC.c ****                 }
 247:.\Generated_Source\PSoC4/ADC.c ****             }
 248:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 249:.\Generated_Source\PSoC4/ADC.c **** 
 250:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 247              		.loc 1 250 0
 248 00f8 8023     		mov	r3, #128
 249 00fa DA00     		lsl	r2, r3, #3
 250 00fc 8023     		mov	r3, #128
 251 00fe 9B00     		lsl	r3, r3, #2
 252 0100 1340     		and	r3, r2
 253 0102 03D0     		beq	.L11
 251:.\Generated_Source\PSoC4/ADC.c ****         {
 252:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 254              		.loc 1 252 0
 255 0104 8023     		mov	r3, #128
 256 0106 5B00     		lsl	r3, r3, #1
 257 0108 BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 10


 258 010a 02E0     		b	.L12
 259              	.L11:
 253:.\Generated_Source\PSoC4/ADC.c ****         }
 254:.\Generated_Source\PSoC4/ADC.c ****         else
 255:.\Generated_Source\PSoC4/ADC.c ****         {
 256:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 260              		.loc 1 256 0
 261 010c 8023     		mov	r3, #128
 262 010e 5B01     		lsl	r3, r3, #5
 263 0110 BB60     		str	r3, [r7, #8]
 264              	.L12:
 257:.\Generated_Source\PSoC4/ADC.c ****         }
 258:.\Generated_Source\PSoC4/ADC.c **** 
 259:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 265              		.loc 1 259 0
 266 0112 8023     		mov	r3, #128
 267 0114 DA00     		lsl	r2, r3, #3
 268 0116 8023     		mov	r3, #128
 269 0118 5B00     		lsl	r3, r3, #1
 270 011a 1340     		and	r3, r2
 271 011c 05D1     		bne	.L13
 260:.\Generated_Source\PSoC4/ADC.c ****         {
 261:.\Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 262:.\Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 263:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 264:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 265:.\Generated_Source\PSoC4/ADC.c ****             #else
 266:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 272              		.loc 1 266 0
 273 011e 294B     		ldr	r3, .L17+84
 274 0120 FA68     		ldr	r2, [r7, #12]
 275 0122 5200     		lsl	r2, r2, #1
 276 0124 0021     		mov	r1, #0
 277 0126 D152     		strh	r1, [r2, r3]
 278 0128 09E0     		b	.L14
 279              	.L13:
 267:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 268:.\Generated_Source\PSoC4/ADC.c ****         }
 269:.\Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 270:.\Generated_Source\PSoC4/ADC.c ****         {
 271:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 272:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 273:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 280              		.loc 1 273 0
 281 012a BB68     		ldr	r3, [r7, #8]
 282 012c 002B     		cmp	r3, #0
 283 012e 00DA     		bge	.L15
 284 0130 0133     		add	r3, r3, #1
 285              	.L15:
 286 0132 5B10     		asr	r3, r3, #1
 287 0134 99B2     		uxth	r1, r3
 288 0136 234B     		ldr	r3, .L17+84
 289 0138 FA68     		ldr	r2, [r7, #12]
 290 013a 5200     		lsl	r2, r2, #1
 291 013c D152     		strh	r1, [r2, r3]
 292              	.L14:
 274:.\Generated_Source\PSoC4/ADC.c ****             #else
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 11


 275:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 276:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 277:.\Generated_Source\PSoC4/ADC.c ****         }
 278:.\Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 279:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 293              		.loc 1 279 0
 294 013e BB68     		ldr	r3, [r7, #8]
 295 0140 214A     		ldr	r2, .L17+88
 296 0142 5343     		mul	r3, r2
 297 0144 214A     		ldr	r2, .L17+92
 298 0146 9B18     		add	r3, r3, r2
 280:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 299              		.loc 1 280 0
 300 0148 181C     		mov	r0, r3
 301 014a 2149     		ldr	r1, .L17+96
 302 014c FFF7FEFF 		bl	__aeabi_idiv
 303 0150 031C     		mov	r3, r0
 279:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 304              		.loc 1 279 0
 305 0152 9BB2     		uxth	r3, r3
 306 0154 19B2     		sxth	r1, r3
 307 0156 1F4B     		ldr	r3, .L17+100
 308 0158 FA68     		ldr	r2, [r7, #12]
 309 015a 9200     		lsl	r2, r2, #2
 310 015c D150     		str	r1, [r2, r3]
 200:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 311              		.loc 1 200 0
 312 015e FB68     		ldr	r3, [r7, #12]
 313 0160 0133     		add	r3, r3, #1
 314 0162 FB60     		str	r3, [r7, #12]
 315              	.L8:
 200:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 316              		.loc 1 200 0 is_stmt 0 discriminator 1
 317 0164 FB68     		ldr	r3, [r7, #12]
 318 0166 002B     		cmp	r3, #0
 319 0168 9AD0     		beq	.L16
 281:.\Generated_Source\PSoC4/ADC.c ****     }
 282:.\Generated_Source\PSoC4/ADC.c **** }
 320              		.loc 1 282 0 is_stmt 1
 321 016a BD46     		mov	sp, r7
 322 016c 05B0     		add	sp, sp, #20
 323              		@ sp needed
 324 016e 90BD     		pop	{r4, r7, pc}
 325              	.L18:
 326              		.align	2
 327              	.L17:
 328 0170 00000000 		.word	ADC_ISR
 329 0174 20003A40 		.word	1077542944
 330 0178 00003A40 		.word	1077542912
 331 017c 80033A40 		.word	1077543808
 332 0180 70021053 		.word	1393558128
 333 0184 70020053 		.word	1392509552
 334 0188 04003A40 		.word	1077542916
 335 018c C4000A80 		.word	-2146828092
 336 0190 18003A40 		.word	1077542936
 337 0194 0000FF07 		.word	134152192
 338 0198 1C003A40 		.word	1077542940
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 12


 339 019c 10003A40 		.word	1077542928
 340 01a0 04000400 		.word	262148
 341 01a4 14003A40 		.word	1077542932
 342 01a8 00033A40 		.word	1077543680
 343 01ac 28023A40 		.word	1077543464
 344 01b0 38023A40 		.word	1077543480
 345 01b4 18023A40 		.word	1077543448
 346 01b8 30003A40 		.word	1077542960
 347 01bc FFFFFFDF 		.word	-536870913
 348 01c0 80003A40 		.word	1077543040
 349 01c4 00000000 		.word	ADC_offset
 350 01c8 10270000 		.word	10000
 351 01cc E40C0000 		.word	3300
 352 01d0 C8190000 		.word	6600
 353 01d4 00000000 		.word	ADC_countsPer10Volt
 354              		.cfi_endproc
 355              	.LFE3:
 356              		.size	ADC_Init, .-ADC_Init
 357              		.section	.text.ADC_Enable,"ax",%progbits
 358              		.align	2
 359              		.global	ADC_Enable
 360              		.code	16
 361              		.thumb_func
 362              		.type	ADC_Enable, %function
 363              	ADC_Enable:
 364              	.LFB4:
 283:.\Generated_Source\PSoC4/ADC.c **** 
 284:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 285:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 286:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 287:.\Generated_Source\PSoC4/ADC.c **** *
 288:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 289:.\Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 290:.\Generated_Source\PSoC4/ADC.c **** *
 291:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 292:.\Generated_Source\PSoC4/ADC.c **** *  None.
 293:.\Generated_Source\PSoC4/ADC.c **** *
 294:.\Generated_Source\PSoC4/ADC.c **** * Return:
 295:.\Generated_Source\PSoC4/ADC.c **** *  None.
 296:.\Generated_Source\PSoC4/ADC.c **** *
 297:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 298:.\Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 299:.\Generated_Source\PSoC4/ADC.c **** {
 365              		.loc 1 299 0
 366              		.cfi_startproc
 367 0000 80B5     		push	{r7, lr}
 368              		.cfi_def_cfa_offset 8
 369              		.cfi_offset 7, -8
 370              		.cfi_offset 14, -4
 371 0002 00AF     		add	r7, sp, #0
 372              		.cfi_def_cfa_register 7
 300:.\Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 373              		.loc 1 300 0
 374 0004 0A4B     		ldr	r3, .L22
 375 0006 1B68     		ldr	r3, [r3]
 376 0008 002B     		cmp	r3, #0
 377 000a 0EDB     		blt	.L19
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 13


 301:.\Generated_Source\PSoC4/ADC.c ****     {
 302:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4)
 303:.\Generated_Source\PSoC4/ADC.c **** 
 304:.\Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 378              		.loc 1 304 0
 379 000c C046     		mov	r8, r8
 380              	.L21:
 381              		.loc 1 304 0 is_stmt 0 discriminator 1
 382 000e 094B     		ldr	r3, .L22+4
 383 0010 1B68     		ldr	r3, [r3]
 384 0012 002B     		cmp	r3, #0
 385 0014 FBDB     		blt	.L21
 305:.\Generated_Source\PSoC4/ADC.c ****             {
 306:.\Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle for to avoid deadlock */
 307:.\Generated_Source\PSoC4/ADC.c ****             }
 308:.\Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4) */
 309:.\Generated_Source\PSoC4/ADC.c ****         
 310:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 386              		.loc 1 310 0 is_stmt 1
 387 0016 064B     		ldr	r3, .L22
 388 0018 054A     		ldr	r2, .L22
 389 001a 1268     		ldr	r2, [r2]
 390 001c 8021     		mov	r1, #128
 391 001e 0906     		lsl	r1, r1, #24
 392 0020 0A43     		orr	r2, r1
 393 0022 1A60     		str	r2, [r3]
 311:.\Generated_Source\PSoC4/ADC.c ****         
 312:.\Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 313:.\Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 394              		.loc 1 313 0
 395 0024 0A20     		mov	r0, #10
 396 0026 FFF7FEFF 		bl	CyDelayUs
 397              	.L19:
 314:.\Generated_Source\PSoC4/ADC.c ****     }
 315:.\Generated_Source\PSoC4/ADC.c **** }
 398              		.loc 1 315 0
 399 002a BD46     		mov	sp, r7
 400              		@ sp needed
 401 002c 80BD     		pop	{r7, pc}
 402              	.L23:
 403 002e C046     		.align	2
 404              	.L22:
 405 0030 00003A40 		.word	1077542912
 406 0034 08023A40 		.word	1077543432
 407              		.cfi_endproc
 408              	.LFE4:
 409              		.size	ADC_Enable, .-ADC_Enable
 410              		.section	.text.ADC_Stop,"ax",%progbits
 411              		.align	2
 412              		.global	ADC_Stop
 413              		.code	16
 414              		.thumb_func
 415              		.type	ADC_Stop, %function
 416              	ADC_Stop:
 417              	.LFB5:
 316:.\Generated_Source\PSoC4/ADC.c **** 
 317:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 14


 318:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 319:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 320:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 321:.\Generated_Source\PSoC4/ADC.c **** *
 322:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 323:.\Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 324:.\Generated_Source\PSoC4/ADC.c **** *  mode.
 325:.\Generated_Source\PSoC4/ADC.c **** *
 326:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 327:.\Generated_Source\PSoC4/ADC.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC.c **** *
 329:.\Generated_Source\PSoC4/ADC.c **** * Return:
 330:.\Generated_Source\PSoC4/ADC.c **** *  None.
 331:.\Generated_Source\PSoC4/ADC.c **** *
 332:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 333:.\Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 334:.\Generated_Source\PSoC4/ADC.c **** {
 418              		.loc 1 334 0
 419              		.cfi_startproc
 420 0000 80B5     		push	{r7, lr}
 421              		.cfi_def_cfa_offset 8
 422              		.cfi_offset 7, -8
 423              		.cfi_offset 14, -4
 424 0002 00AF     		add	r7, sp, #0
 425              		.cfi_def_cfa_register 7
 335:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 426              		.loc 1 335 0
 427 0004 034B     		ldr	r3, .L25
 428 0006 034A     		ldr	r2, .L25
 429 0008 1268     		ldr	r2, [r2]
 430 000a 5200     		lsl	r2, r2, #1
 431 000c 5208     		lsr	r2, r2, #1
 432 000e 1A60     		str	r2, [r3]
 336:.\Generated_Source\PSoC4/ADC.c **** }
 433              		.loc 1 336 0
 434 0010 BD46     		mov	sp, r7
 435              		@ sp needed
 436 0012 80BD     		pop	{r7, pc}
 437              	.L26:
 438              		.align	2
 439              	.L25:
 440 0014 00003A40 		.word	1077542912
 441              		.cfi_endproc
 442              	.LFE5:
 443              		.size	ADC_Stop, .-ADC_Stop
 444              		.section	.text.ADC_StartConvert,"ax",%progbits
 445              		.align	2
 446              		.global	ADC_StartConvert
 447              		.code	16
 448              		.thumb_func
 449              		.type	ADC_StartConvert, %function
 450              	ADC_StartConvert:
 451              	.LFB6:
 337:.\Generated_Source\PSoC4/ADC.c **** 
 338:.\Generated_Source\PSoC4/ADC.c **** 
 339:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 340:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 15


 341:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 342:.\Generated_Source\PSoC4/ADC.c **** *
 343:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 344:.\Generated_Source\PSoC4/ADC.c **** *  Description:
 345:.\Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 346:.\Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 347:.\Generated_Source\PSoC4/ADC.c **** *
 348:.\Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 349:.\Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 350:.\Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 351:.\Generated_Source\PSoC4/ADC.c **** *
 352:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 353:.\Generated_Source\PSoC4/ADC.c **** *  None.
 354:.\Generated_Source\PSoC4/ADC.c **** *
 355:.\Generated_Source\PSoC4/ADC.c **** * Return:
 356:.\Generated_Source\PSoC4/ADC.c **** *  None.
 357:.\Generated_Source\PSoC4/ADC.c **** *
 358:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 359:.\Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 360:.\Generated_Source\PSoC4/ADC.c **** {
 452              		.loc 1 360 0
 453              		.cfi_startproc
 454 0000 80B5     		push	{r7, lr}
 455              		.cfi_def_cfa_offset 8
 456              		.cfi_offset 7, -8
 457              		.cfi_offset 14, -4
 458 0002 00AF     		add	r7, sp, #0
 459              		.cfi_def_cfa_register 7
 361:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 362:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 363:.\Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 364:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 460              		.loc 1 364 0
 461 0004 024B     		ldr	r3, .L28
 462 0006 0122     		mov	r2, #1
 463 0008 1A60     		str	r2, [r3]
 365:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 366:.\Generated_Source\PSoC4/ADC.c **** 
 367:.\Generated_Source\PSoC4/ADC.c **** }
 464              		.loc 1 367 0
 465 000a BD46     		mov	sp, r7
 466              		@ sp needed
 467 000c 80BD     		pop	{r7, pc}
 468              	.L29:
 469 000e C046     		.align	2
 470              	.L28:
 471 0010 24003A40 		.word	1077542948
 472              		.cfi_endproc
 473              	.LFE6:
 474              		.size	ADC_StartConvert, .-ADC_StartConvert
 475              		.section	.text.ADC_StopConvert,"ax",%progbits
 476              		.align	2
 477              		.global	ADC_StopConvert
 478              		.code	16
 479              		.thumb_func
 480              		.type	ADC_StopConvert, %function
 481              	ADC_StopConvert:
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 16


 482              	.LFB7:
 368:.\Generated_Source\PSoC4/ADC.c **** 
 369:.\Generated_Source\PSoC4/ADC.c **** 
 370:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 371:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 372:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 373:.\Generated_Source\PSoC4/ADC.c **** *
 374:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 375:.\Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 376:.\Generated_Source\PSoC4/ADC.c **** *
 377:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 378:.\Generated_Source\PSoC4/ADC.c **** *  None.
 379:.\Generated_Source\PSoC4/ADC.c **** *
 380:.\Generated_Source\PSoC4/ADC.c **** * Return:
 381:.\Generated_Source\PSoC4/ADC.c **** *  None.
 382:.\Generated_Source\PSoC4/ADC.c **** *
 383:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 384:.\Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 385:.\Generated_Source\PSoC4/ADC.c **** {
 483              		.loc 1 385 0
 484              		.cfi_startproc
 485 0000 80B5     		push	{r7, lr}
 486              		.cfi_def_cfa_offset 8
 487              		.cfi_offset 7, -8
 488              		.cfi_offset 14, -4
 489 0002 00AF     		add	r7, sp, #0
 490              		.cfi_def_cfa_register 7
 386:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 387:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 388:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 389:.\Generated_Source\PSoC4/ADC.c **** }
 491              		.loc 1 389 0
 492 0004 BD46     		mov	sp, r7
 493              		@ sp needed
 494 0006 80BD     		pop	{r7, pc}
 495              		.cfi_endproc
 496              	.LFE7:
 497              		.size	ADC_StopConvert, .-ADC_StopConvert
 498              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 499              		.align	2
 500              		.global	ADC_IsEndConversion
 501              		.code	16
 502              		.thumb_func
 503              		.type	ADC_IsEndConversion, %function
 504              	ADC_IsEndConversion:
 505              	.LFB8:
 390:.\Generated_Source\PSoC4/ADC.c **** 
 391:.\Generated_Source\PSoC4/ADC.c **** 
 392:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 393:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 394:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 395:.\Generated_Source\PSoC4/ADC.c **** *
 396:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 397:.\Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 398:.\Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 399:.\Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 400:.\Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 17


 401:.\Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 402:.\Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 403:.\Generated_Source\PSoC4/ADC.c **** *  completed.
 404:.\Generated_Source\PSoC4/ADC.c **** *
 405:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 406:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 407:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 408:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 409:.\Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 410:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 411:.\Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 412:.\Generated_Source\PSoC4/ADC.c **** *
 413:.\Generated_Source\PSoC4/ADC.c **** * Return:
 414:.\Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 415:.\Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 416:.\Generated_Source\PSoC4/ADC.c **** *
 417:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 418:.\Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 419:.\Generated_Source\PSoC4/ADC.c **** {
 506              		.loc 1 419 0
 507              		.cfi_startproc
 508 0000 80B5     		push	{r7, lr}
 509              		.cfi_def_cfa_offset 8
 510              		.cfi_offset 7, -8
 511              		.cfi_offset 14, -4
 512 0002 84B0     		sub	sp, sp, #16
 513              		.cfi_def_cfa_offset 24
 514 0004 00AF     		add	r7, sp, #0
 515              		.cfi_def_cfa_register 7
 516 0006 7860     		str	r0, [r7, #4]
 420:.\Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 517              		.loc 1 420 0
 518 0008 0023     		mov	r3, #0
 519 000a FB60     		str	r3, [r7, #12]
 421:.\Generated_Source\PSoC4/ADC.c **** 
 422:.\Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 520              		.loc 1 422 0
 521 000c 7A68     		ldr	r2, [r7, #4]
 522 000e 0323     		mov	r3, #3
 523 0010 1340     		and	r3, r2
 524 0012 11D0     		beq	.L32
 525              	.L34:
 423:.\Generated_Source\PSoC4/ADC.c ****     {
 424:.\Generated_Source\PSoC4/ADC.c ****         do
 425:.\Generated_Source\PSoC4/ADC.c ****         {
 426:.\Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 526              		.loc 1 426 0 discriminator 1
 527 0014 0B4B     		ldr	r3, .L36
 528 0016 1A68     		ldr	r2, [r3]
 529 0018 0123     		mov	r3, #1
 530 001a 1340     		and	r3, r2
 531 001c FB60     		str	r3, [r7, #12]
 427:.\Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 532              		.loc 1 427 0 discriminator 1
 533 001e FB68     		ldr	r3, [r7, #12]
 534 0020 002B     		cmp	r3, #0
 535 0022 03D1     		bne	.L33
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 18


 536 0024 7A68     		ldr	r2, [r7, #4]
 537 0026 0223     		mov	r3, #2
 538 0028 1340     		and	r3, r2
 539 002a F3D1     		bne	.L34
 540              	.L33:
 428:.\Generated_Source\PSoC4/ADC.c **** 
 429:.\Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 541              		.loc 1 429 0
 542 002c FB68     		ldr	r3, [r7, #12]
 543 002e 002B     		cmp	r3, #0
 544 0030 02D0     		beq	.L32
 430:.\Generated_Source\PSoC4/ADC.c ****         {
 431:.\Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 432:.\Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 545              		.loc 1 432 0
 546 0032 044B     		ldr	r3, .L36
 547 0034 0122     		mov	r2, #1
 548 0036 1A60     		str	r2, [r3]
 549              	.L32:
 433:.\Generated_Source\PSoC4/ADC.c ****         }
 434:.\Generated_Source\PSoC4/ADC.c ****     }
 435:.\Generated_Source\PSoC4/ADC.c **** 
 436:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 437:.\Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 438:.\Generated_Source\PSoC4/ADC.c ****         {
 439:.\Generated_Source\PSoC4/ADC.c ****             do
 440:.\Generated_Source\PSoC4/ADC.c ****             {
 441:.\Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 442:.\Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 443:.\Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 444:.\Generated_Source\PSoC4/ADC.c **** 
 445:.\Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 446:.\Generated_Source\PSoC4/ADC.c ****             {
 447:.\Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 448:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 449:.\Generated_Source\PSoC4/ADC.c ****             }
 450:.\Generated_Source\PSoC4/ADC.c ****         }
 451:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 452:.\Generated_Source\PSoC4/ADC.c **** 
 453:.\Generated_Source\PSoC4/ADC.c ****     return (status);
 550              		.loc 1 453 0
 551 0038 FB68     		ldr	r3, [r7, #12]
 454:.\Generated_Source\PSoC4/ADC.c **** }
 552              		.loc 1 454 0
 553 003a 181C     		mov	r0, r3
 554 003c BD46     		mov	sp, r7
 555 003e 04B0     		add	sp, sp, #16
 556              		@ sp needed
 557 0040 80BD     		pop	{r7, pc}
 558              	.L37:
 559 0042 C046     		.align	2
 560              	.L36:
 561 0044 10023A40 		.word	1077543440
 562              		.cfi_endproc
 563              	.LFE8:
 564              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 565              		.section	.text.ADC_GetResult16,"ax",%progbits
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 19


 566              		.align	2
 567              		.global	ADC_GetResult16
 568              		.code	16
 569              		.thumb_func
 570              		.type	ADC_GetResult16, %function
 571              	ADC_GetResult16:
 572              	.LFB9:
 455:.\Generated_Source\PSoC4/ADC.c **** 
 456:.\Generated_Source\PSoC4/ADC.c **** 
 457:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 458:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 459:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 460:.\Generated_Source\PSoC4/ADC.c **** *
 461:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 462:.\Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 463:.\Generated_Source\PSoC4/ADC.c **** *
 464:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 465:.\Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 466:.\Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 467:.\Generated_Source\PSoC4/ADC.c **** *
 468:.\Generated_Source\PSoC4/ADC.c **** * Return:
 469:.\Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 470:.\Generated_Source\PSoC4/ADC.c **** *
 471:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 472:.\Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 473:.\Generated_Source\PSoC4/ADC.c **** {
 573              		.loc 1 473 0
 574              		.cfi_startproc
 575 0000 80B5     		push	{r7, lr}
 576              		.cfi_def_cfa_offset 8
 577              		.cfi_offset 7, -8
 578              		.cfi_offset 14, -4
 579 0002 84B0     		sub	sp, sp, #16
 580              		.cfi_def_cfa_offset 24
 581 0004 00AF     		add	r7, sp, #0
 582              		.cfi_def_cfa_register 7
 583 0006 7860     		str	r0, [r7, #4]
 474:.\Generated_Source\PSoC4/ADC.c ****     uint32 result;
 475:.\Generated_Source\PSoC4/ADC.c **** 
 476:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 477:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 584              		.loc 1 477 0
 585 0008 7B68     		ldr	r3, [r7, #4]
 586 000a 002B     		cmp	r3, #0
 587 000c 02D0     		beq	.L39
 588              		.loc 1 477 0 is_stmt 0 discriminator 1
 589 000e 0020     		mov	r0, #0
 590 0010 FFF7FEFF 		bl	CyHalt
 591              	.L39:
 478:.\Generated_Source\PSoC4/ADC.c **** 
 479:.\Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 592              		.loc 1 479 0 is_stmt 1
 593 0014 7B68     		ldr	r3, [r7, #4]
 594 0016 002B     		cmp	r3, #0
 595 0018 08D1     		bne	.L40
 480:.\Generated_Source\PSoC4/ADC.c ****     {
 481:.\Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 20


 596              		.loc 1 481 0
 597 001a 7B68     		ldr	r3, [r7, #4]
 598 001c 9B00     		lsl	r3, r3, #2
 599 001e 084A     		ldr	r2, .L43
 600 0020 9B18     		add	r3, r3, r2
 601 0022 1B68     		ldr	r3, [r3]
 602 0024 1B04     		lsl	r3, r3, #16
 603 0026 1B0C     		lsr	r3, r3, #16
 604 0028 FB60     		str	r3, [r7, #12]
 605 002a 01E0     		b	.L41
 606              	.L40:
 482:.\Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 483:.\Generated_Source\PSoC4/ADC.c ****     }
 484:.\Generated_Source\PSoC4/ADC.c ****     else
 485:.\Generated_Source\PSoC4/ADC.c ****     {
 486:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 487:.\Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 488:.\Generated_Source\PSoC4/ADC.c ****         #else
 489:.\Generated_Source\PSoC4/ADC.c ****             result = 0u;
 607              		.loc 1 489 0
 608 002c 0023     		mov	r3, #0
 609 002e FB60     		str	r3, [r7, #12]
 610              	.L41:
 490:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 491:.\Generated_Source\PSoC4/ADC.c ****     }
 492:.\Generated_Source\PSoC4/ADC.c **** 
 493:.\Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 611              		.loc 1 493 0
 612 0030 FB68     		ldr	r3, [r7, #12]
 613 0032 9BB2     		uxth	r3, r3
 614 0034 1BB2     		sxth	r3, r3
 494:.\Generated_Source\PSoC4/ADC.c **** }
 615              		.loc 1 494 0
 616 0036 181C     		mov	r0, r3
 617 0038 BD46     		mov	sp, r7
 618 003a 04B0     		add	sp, sp, #16
 619              		@ sp needed
 620 003c 80BD     		pop	{r7, pc}
 621              	.L44:
 622 003e C046     		.align	2
 623              	.L43:
 624 0040 80013A40 		.word	1077543296
 625              		.cfi_endproc
 626              	.LFE9:
 627              		.size	ADC_GetResult16, .-ADC_GetResult16
 628              		.section	.text.ADC_SetChanMask,"ax",%progbits
 629              		.align	2
 630              		.global	ADC_SetChanMask
 631              		.code	16
 632              		.thumb_func
 633              		.type	ADC_SetChanMask, %function
 634              	ADC_SetChanMask:
 635              	.LFB10:
 495:.\Generated_Source\PSoC4/ADC.c **** 
 496:.\Generated_Source\PSoC4/ADC.c **** 
 497:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 498:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 21


 499:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 500:.\Generated_Source\PSoC4/ADC.c **** *
 501:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 502:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 503:.\Generated_Source\PSoC4/ADC.c **** *
 504:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 505:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 506:.\Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 507:.\Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 508:.\Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 509:.\Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 510:.\Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 511:.\Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 512:.\Generated_Source\PSoC4/ADC.c **** *
 513:.\Generated_Source\PSoC4/ADC.c **** * Return:
 514:.\Generated_Source\PSoC4/ADC.c **** *  None.
 515:.\Generated_Source\PSoC4/ADC.c **** *
 516:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 517:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 518:.\Generated_Source\PSoC4/ADC.c **** {
 636              		.loc 1 518 0
 637              		.cfi_startproc
 638 0000 80B5     		push	{r7, lr}
 639              		.cfi_def_cfa_offset 8
 640              		.cfi_offset 7, -8
 641              		.cfi_offset 14, -4
 642 0002 82B0     		sub	sp, sp, #8
 643              		.cfi_def_cfa_offset 16
 644 0004 00AF     		add	r7, sp, #0
 645              		.cfi_def_cfa_register 7
 646 0006 7860     		str	r0, [r7, #4]
 519:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 647              		.loc 1 519 0
 648 0008 034B     		ldr	r3, .L46
 649 000a 7968     		ldr	r1, [r7, #4]
 650 000c 0122     		mov	r2, #1
 651 000e 0A40     		and	r2, r1
 652 0010 1A60     		str	r2, [r3]
 520:.\Generated_Source\PSoC4/ADC.c **** }
 653              		.loc 1 520 0
 654 0012 BD46     		mov	sp, r7
 655 0014 02B0     		add	sp, sp, #8
 656              		@ sp needed
 657 0016 80BD     		pop	{r7, pc}
 658              	.L47:
 659              		.align	2
 660              	.L46:
 661 0018 20003A40 		.word	1077542944
 662              		.cfi_endproc
 663              	.LFE10:
 664              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 665              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 666              		.align	2
 667              		.global	ADC_SetLowLimit
 668              		.code	16
 669              		.thumb_func
 670              		.type	ADC_SetLowLimit, %function
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 22


 671              	ADC_SetLowLimit:
 672              	.LFB11:
 521:.\Generated_Source\PSoC4/ADC.c **** 
 522:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 523:.\Generated_Source\PSoC4/ADC.c **** 
 524:.\Generated_Source\PSoC4/ADC.c **** 
 525:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 526:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 527:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 528:.\Generated_Source\PSoC4/ADC.c ****     *
 529:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 530:.\Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 531:.\Generated_Source\PSoC4/ADC.c ****     *
 532:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 533:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 534:.\Generated_Source\PSoC4/ADC.c ****     *
 535:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 536:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 537:.\Generated_Source\PSoC4/ADC.c ****     *
 538:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 539:.\Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 540:.\Generated_Source\PSoC4/ADC.c ****     {
 541:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 542:.\Generated_Source\PSoC4/ADC.c ****     }
 543:.\Generated_Source\PSoC4/ADC.c **** 
 544:.\Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 545:.\Generated_Source\PSoC4/ADC.c **** 
 546:.\Generated_Source\PSoC4/ADC.c **** 
 547:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 548:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 549:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 550:.\Generated_Source\PSoC4/ADC.c **** *
 551:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 552:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 553:.\Generated_Source\PSoC4/ADC.c **** *
 554:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 555:.\Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 556:.\Generated_Source\PSoC4/ADC.c **** *
 557:.\Generated_Source\PSoC4/ADC.c **** * Return:
 558:.\Generated_Source\PSoC4/ADC.c **** *  None.
 559:.\Generated_Source\PSoC4/ADC.c **** *
 560:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 561:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 562:.\Generated_Source\PSoC4/ADC.c **** {
 673              		.loc 1 562 0
 674              		.cfi_startproc
 675 0000 80B5     		push	{r7, lr}
 676              		.cfi_def_cfa_offset 8
 677              		.cfi_offset 7, -8
 678              		.cfi_offset 14, -4
 679 0002 82B0     		sub	sp, sp, #8
 680              		.cfi_def_cfa_offset 16
 681 0004 00AF     		add	r7, sp, #0
 682              		.cfi_def_cfa_register 7
 683 0006 7860     		str	r0, [r7, #4]
 563:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 684              		.loc 1 563 0
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 23


 685 0008 084B     		ldr	r3, .L49
 686 000a 084A     		ldr	r2, .L49
 687 000c 1268     		ldr	r2, [r2]
 688 000e 120C     		lsr	r2, r2, #16
 689 0010 1204     		lsl	r2, r2, #16
 690 0012 1A60     		str	r2, [r3]
 564:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 691              		.loc 1 564 0
 692 0014 054B     		ldr	r3, .L49
 693 0016 054A     		ldr	r2, .L49
 694 0018 1168     		ldr	r1, [r2]
 695 001a 7A68     		ldr	r2, [r7, #4]
 696 001c 1204     		lsl	r2, r2, #16
 697 001e 120C     		lsr	r2, r2, #16
 698 0020 0A43     		orr	r2, r1
 699 0022 1A60     		str	r2, [r3]
 565:.\Generated_Source\PSoC4/ADC.c **** }
 700              		.loc 1 565 0
 701 0024 BD46     		mov	sp, r7
 702 0026 02B0     		add	sp, sp, #8
 703              		@ sp needed
 704 0028 80BD     		pop	{r7, pc}
 705              	.L50:
 706 002a C046     		.align	2
 707              	.L49:
 708 002c 18003A40 		.word	1077542936
 709              		.cfi_endproc
 710              	.LFE11:
 711              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 712              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 713              		.align	2
 714              		.global	ADC_SetHighLimit
 715              		.code	16
 716              		.thumb_func
 717              		.type	ADC_SetHighLimit, %function
 718              	ADC_SetHighLimit:
 719              	.LFB12:
 566:.\Generated_Source\PSoC4/ADC.c **** 
 567:.\Generated_Source\PSoC4/ADC.c **** 
 568:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 569:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 570:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 571:.\Generated_Source\PSoC4/ADC.c **** *
 572:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 573:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 574:.\Generated_Source\PSoC4/ADC.c **** *
 575:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 576:.\Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 577:.\Generated_Source\PSoC4/ADC.c **** *
 578:.\Generated_Source\PSoC4/ADC.c **** * Return:
 579:.\Generated_Source\PSoC4/ADC.c **** *  None.
 580:.\Generated_Source\PSoC4/ADC.c **** *
 581:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 582:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 583:.\Generated_Source\PSoC4/ADC.c **** {
 720              		.loc 1 583 0
 721              		.cfi_startproc
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 24


 722 0000 80B5     		push	{r7, lr}
 723              		.cfi_def_cfa_offset 8
 724              		.cfi_offset 7, -8
 725              		.cfi_offset 14, -4
 726 0002 82B0     		sub	sp, sp, #8
 727              		.cfi_def_cfa_offset 16
 728 0004 00AF     		add	r7, sp, #0
 729              		.cfi_def_cfa_register 7
 730 0006 7860     		str	r0, [r7, #4]
 584:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 731              		.loc 1 584 0
 732 0008 074B     		ldr	r3, .L52
 733 000a 074A     		ldr	r2, .L52
 734 000c 1268     		ldr	r2, [r2]
 735 000e 1204     		lsl	r2, r2, #16
 736 0010 120C     		lsr	r2, r2, #16
 737 0012 1A60     		str	r2, [r3]
 585:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 738              		.loc 1 585 0
 739 0014 044B     		ldr	r3, .L52
 740 0016 044A     		ldr	r2, .L52
 741 0018 1168     		ldr	r1, [r2]
 742 001a 7A68     		ldr	r2, [r7, #4]
 743 001c 1204     		lsl	r2, r2, #16
 744 001e 0A43     		orr	r2, r1
 745 0020 1A60     		str	r2, [r3]
 586:.\Generated_Source\PSoC4/ADC.c **** }
 746              		.loc 1 586 0
 747 0022 BD46     		mov	sp, r7
 748 0024 02B0     		add	sp, sp, #8
 749              		@ sp needed
 750 0026 80BD     		pop	{r7, pc}
 751              	.L53:
 752              		.align	2
 753              	.L52:
 754 0028 18003A40 		.word	1077542936
 755              		.cfi_endproc
 756              	.LFE12:
 757              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 758              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 759              		.align	2
 760              		.global	ADC_SetLimitMask
 761              		.code	16
 762              		.thumb_func
 763              		.type	ADC_SetLimitMask, %function
 764              	ADC_SetLimitMask:
 765              	.LFB13:
 587:.\Generated_Source\PSoC4/ADC.c **** 
 588:.\Generated_Source\PSoC4/ADC.c **** 
 589:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 590:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 591:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 592:.\Generated_Source\PSoC4/ADC.c **** *
 593:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 594:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 595:.\Generated_Source\PSoC4/ADC.c **** *
 596:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 25


 597:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 598:.\Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 599:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 600:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 601:.\Generated_Source\PSoC4/ADC.c **** *
 602:.\Generated_Source\PSoC4/ADC.c **** * Return:
 603:.\Generated_Source\PSoC4/ADC.c **** *  None.
 604:.\Generated_Source\PSoC4/ADC.c **** *
 605:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 606:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 607:.\Generated_Source\PSoC4/ADC.c **** {
 766              		.loc 1 607 0
 767              		.cfi_startproc
 768 0000 80B5     		push	{r7, lr}
 769              		.cfi_def_cfa_offset 8
 770              		.cfi_offset 7, -8
 771              		.cfi_offset 14, -4
 772 0002 82B0     		sub	sp, sp, #8
 773              		.cfi_def_cfa_offset 16
 774 0004 00AF     		add	r7, sp, #0
 775              		.cfi_def_cfa_register 7
 776 0006 7860     		str	r0, [r7, #4]
 608:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 777              		.loc 1 608 0
 778 0008 034B     		ldr	r3, .L55
 779 000a 7968     		ldr	r1, [r7, #4]
 780 000c 0122     		mov	r2, #1
 781 000e 0A40     		and	r2, r1
 782 0010 1A60     		str	r2, [r3]
 609:.\Generated_Source\PSoC4/ADC.c **** }
 783              		.loc 1 609 0
 784 0012 BD46     		mov	sp, r7
 785 0014 02B0     		add	sp, sp, #8
 786              		@ sp needed
 787 0016 80BD     		pop	{r7, pc}
 788              	.L56:
 789              		.align	2
 790              	.L55:
 791 0018 38023A40 		.word	1077543480
 792              		.cfi_endproc
 793              	.LFE13:
 794              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 795              		.section	.text.ADC_SetSatMask,"ax",%progbits
 796              		.align	2
 797              		.global	ADC_SetSatMask
 798              		.code	16
 799              		.thumb_func
 800              		.type	ADC_SetSatMask, %function
 801              	ADC_SetSatMask:
 802              	.LFB14:
 610:.\Generated_Source\PSoC4/ADC.c **** 
 611:.\Generated_Source\PSoC4/ADC.c **** 
 612:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 613:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 614:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 615:.\Generated_Source\PSoC4/ADC.c **** *
 616:.\Generated_Source\PSoC4/ADC.c **** * Summary:
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 26


 617:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 618:.\Generated_Source\PSoC4/ADC.c **** *
 619:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 620:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 621:.\Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 622:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 623:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 624:.\Generated_Source\PSoC4/ADC.c **** *
 625:.\Generated_Source\PSoC4/ADC.c **** * Return:
 626:.\Generated_Source\PSoC4/ADC.c **** *  None.
 627:.\Generated_Source\PSoC4/ADC.c **** *
 628:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 629:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 630:.\Generated_Source\PSoC4/ADC.c **** {
 803              		.loc 1 630 0
 804              		.cfi_startproc
 805 0000 80B5     		push	{r7, lr}
 806              		.cfi_def_cfa_offset 8
 807              		.cfi_offset 7, -8
 808              		.cfi_offset 14, -4
 809 0002 82B0     		sub	sp, sp, #8
 810              		.cfi_def_cfa_offset 16
 811 0004 00AF     		add	r7, sp, #0
 812              		.cfi_def_cfa_register 7
 813 0006 7860     		str	r0, [r7, #4]
 631:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 814              		.loc 1 631 0
 815 0008 034B     		ldr	r3, .L58
 816 000a 7968     		ldr	r1, [r7, #4]
 817 000c 0122     		mov	r2, #1
 818 000e 0A40     		and	r2, r1
 819 0010 1A60     		str	r2, [r3]
 632:.\Generated_Source\PSoC4/ADC.c **** }
 820              		.loc 1 632 0
 821 0012 BD46     		mov	sp, r7
 822 0014 02B0     		add	sp, sp, #8
 823              		@ sp needed
 824 0016 80BD     		pop	{r7, pc}
 825              	.L59:
 826              		.align	2
 827              	.L58:
 828 0018 28023A40 		.word	1077543464
 829              		.cfi_endproc
 830              	.LFE14:
 831              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 832              		.section	.text.ADC_SetOffset,"ax",%progbits
 833              		.align	2
 834              		.global	ADC_SetOffset
 835              		.code	16
 836              		.thumb_func
 837              		.type	ADC_SetOffset, %function
 838              	ADC_SetOffset:
 839              	.LFB15:
 633:.\Generated_Source\PSoC4/ADC.c **** 
 634:.\Generated_Source\PSoC4/ADC.c **** 
 635:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 636:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 27


 637:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 638:.\Generated_Source\PSoC4/ADC.c **** *
 639:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 640:.\Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 641:.\Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 642:.\Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 643:.\Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 644:.\Generated_Source\PSoC4/ADC.c **** *
 645:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 646:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 647:.\Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 648:.\Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 649:.\Generated_Source\PSoC4/ADC.c **** *
 650:.\Generated_Source\PSoC4/ADC.c **** * Return:
 651:.\Generated_Source\PSoC4/ADC.c **** *  None.
 652:.\Generated_Source\PSoC4/ADC.c **** *
 653:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 654:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 655:.\Generated_Source\PSoC4/ADC.c **** *
 656:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 657:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 658:.\Generated_Source\PSoC4/ADC.c **** {
 840              		.loc 1 658 0
 841              		.cfi_startproc
 842 0000 80B5     		push	{r7, lr}
 843              		.cfi_def_cfa_offset 8
 844              		.cfi_offset 7, -8
 845              		.cfi_offset 14, -4
 846 0002 82B0     		sub	sp, sp, #8
 847              		.cfi_def_cfa_offset 16
 848 0004 00AF     		add	r7, sp, #0
 849              		.cfi_def_cfa_register 7
 850 0006 7860     		str	r0, [r7, #4]
 851 0008 0A1C     		mov	r2, r1
 852 000a BB1C     		add	r3, r7, #2
 853 000c 1A80     		strh	r2, [r3]
 659:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 660:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 854              		.loc 1 660 0
 855 000e 7B68     		ldr	r3, [r7, #4]
 856 0010 002B     		cmp	r3, #0
 857 0012 02D0     		beq	.L61
 858              		.loc 1 660 0 is_stmt 0 discriminator 1
 859 0014 0020     		mov	r0, #0
 860 0016 FFF7FEFF 		bl	CyHalt
 861              	.L61:
 661:.\Generated_Source\PSoC4/ADC.c **** 
 662:.\Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 862              		.loc 1 662 0 is_stmt 1
 863 001a 044B     		ldr	r3, .L62
 864 001c 7A68     		ldr	r2, [r7, #4]
 865 001e 5200     		lsl	r2, r2, #1
 866 0020 B91C     		add	r1, r7, #2
 867 0022 0988     		ldrh	r1, [r1]
 868 0024 D152     		strh	r1, [r2, r3]
 663:.\Generated_Source\PSoC4/ADC.c **** }
 869              		.loc 1 663 0
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 28


 870 0026 BD46     		mov	sp, r7
 871 0028 02B0     		add	sp, sp, #8
 872              		@ sp needed
 873 002a 80BD     		pop	{r7, pc}
 874              	.L63:
 875              		.align	2
 876              	.L62:
 877 002c 00000000 		.word	ADC_offset
 878              		.cfi_endproc
 879              	.LFE15:
 880              		.size	ADC_SetOffset, .-ADC_SetOffset
 881              		.section	.text.ADC_SetGain,"ax",%progbits
 882              		.align	2
 883              		.global	ADC_SetGain
 884              		.code	16
 885              		.thumb_func
 886              		.type	ADC_SetGain, %function
 887              	ADC_SetGain:
 888              	.LFB16:
 664:.\Generated_Source\PSoC4/ADC.c **** 
 665:.\Generated_Source\PSoC4/ADC.c **** 
 666:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 667:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 668:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 669:.\Generated_Source\PSoC4/ADC.c **** *
 670:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 671:.\Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 672:.\Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 673:.\Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 674:.\Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 675:.\Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 676:.\Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 677:.\Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 678:.\Generated_Source\PSoC4/ADC.c **** *
 679:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 680:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 681:.\Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 682:.\Generated_Source\PSoC4/ADC.c **** *
 683:.\Generated_Source\PSoC4/ADC.c **** * Return:
 684:.\Generated_Source\PSoC4/ADC.c **** *  None.
 685:.\Generated_Source\PSoC4/ADC.c **** *
 686:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 687:.\Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 688:.\Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
 689:.\Generated_Source\PSoC4/ADC.c **** *
 690:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 691:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 692:.\Generated_Source\PSoC4/ADC.c **** {
 889              		.loc 1 692 0
 890              		.cfi_startproc
 891 0000 80B5     		push	{r7, lr}
 892              		.cfi_def_cfa_offset 8
 893              		.cfi_offset 7, -8
 894              		.cfi_offset 14, -4
 895 0002 82B0     		sub	sp, sp, #8
 896              		.cfi_def_cfa_offset 16
 897 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 29


 898              		.cfi_def_cfa_register 7
 899 0006 7860     		str	r0, [r7, #4]
 900 0008 3960     		str	r1, [r7]
 693:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 694:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 901              		.loc 1 694 0
 902 000a 7B68     		ldr	r3, [r7, #4]
 903 000c 002B     		cmp	r3, #0
 904 000e 02D0     		beq	.L65
 905              		.loc 1 694 0 is_stmt 0 discriminator 1
 906 0010 0020     		mov	r0, #0
 907 0012 FFF7FEFF 		bl	CyHalt
 908              	.L65:
 695:.\Generated_Source\PSoC4/ADC.c **** 
 696:.\Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 909              		.loc 1 696 0 is_stmt 1
 910 0016 044B     		ldr	r3, .L66
 911 0018 7A68     		ldr	r2, [r7, #4]
 912 001a 9200     		lsl	r2, r2, #2
 913 001c 3968     		ldr	r1, [r7]
 914 001e D150     		str	r1, [r2, r3]
 697:.\Generated_Source\PSoC4/ADC.c **** }
 915              		.loc 1 697 0
 916 0020 BD46     		mov	sp, r7
 917 0022 02B0     		add	sp, sp, #8
 918              		@ sp needed
 919 0024 80BD     		pop	{r7, pc}
 920              	.L67:
 921 0026 C046     		.align	2
 922              	.L66:
 923 0028 00000000 		.word	ADC_countsPer10Volt
 924              		.cfi_endproc
 925              	.LFE16:
 926              		.size	ADC_SetGain, .-ADC_SetGain
 927              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 928              		.align	2
 929              		.global	ADC_CountsTo_mVolts
 930              		.code	16
 931              		.thumb_func
 932              		.type	ADC_CountsTo_mVolts, %function
 933              	ADC_CountsTo_mVolts:
 934              	.LFB17:
 698:.\Generated_Source\PSoC4/ADC.c **** 
 699:.\Generated_Source\PSoC4/ADC.c **** 
 700:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 701:.\Generated_Source\PSoC4/ADC.c **** 
 702:.\Generated_Source\PSoC4/ADC.c **** 
 703:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 704:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 705:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 706:.\Generated_Source\PSoC4/ADC.c ****     *
 707:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 708:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 709:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 710:.\Generated_Source\PSoC4/ADC.c ****     *
 711:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 712:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 30


 713:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 714:.\Generated_Source\PSoC4/ADC.c ****     *
 715:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 716:.\Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 717:.\Generated_Source\PSoC4/ADC.c ****     *
 718:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 719:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 720:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 721:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 722:.\Generated_Source\PSoC4/ADC.c ****     *
 723:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 724:.\Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 725:.\Generated_Source\PSoC4/ADC.c ****     {
 935              		.loc 1 725 0
 936              		.cfi_startproc
 937 0000 80B5     		push	{r7, lr}
 938              		.cfi_def_cfa_offset 8
 939              		.cfi_offset 7, -8
 940              		.cfi_offset 14, -4
 941 0002 84B0     		sub	sp, sp, #16
 942              		.cfi_def_cfa_offset 24
 943 0004 00AF     		add	r7, sp, #0
 944              		.cfi_def_cfa_register 7
 945 0006 7860     		str	r0, [r7, #4]
 946 0008 0A1C     		mov	r2, r1
 947 000a BB1C     		add	r3, r7, #2
 948 000c 1A80     		strh	r2, [r3]
 726:.\Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 727:.\Generated_Source\PSoC4/ADC.c **** 
 728:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 729:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 949              		.loc 1 729 0
 950 000e 7B68     		ldr	r3, [r7, #4]
 951 0010 002B     		cmp	r3, #0
 952 0012 02D0     		beq	.L69
 953              		.loc 1 729 0 is_stmt 0 discriminator 1
 954 0014 0020     		mov	r0, #0
 955 0016 FFF7FEFF 		bl	CyHalt
 956              	.L69:
 730:.\Generated_Source\PSoC4/ADC.c **** 
 731:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 732:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 733:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 734:.\Generated_Source\PSoC4/ADC.c ****             {
 735:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 736:.\Generated_Source\PSoC4/ADC.c ****             }
 737:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 738:.\Generated_Source\PSoC4/ADC.c **** 
 739:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 740:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 957              		.loc 1 740 0 is_stmt 1
 958 001a BB1C     		add	r3, r7, #2
 959 001c 1A88     		ldrh	r2, [r3]
 960 001e 1E4B     		ldr	r3, .L75
 961 0020 7968     		ldr	r1, [r7, #4]
 962 0022 4900     		lsl	r1, r1, #1
 963 0024 CB5A     		ldrh	r3, [r1, r3]
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 31


 964 0026 9BB2     		uxth	r3, r3
 965 0028 9BB2     		uxth	r3, r3
 966 002a D31A     		sub	r3, r2, r3
 967 002c 9AB2     		uxth	r2, r3
 968 002e BB1C     		add	r3, r7, #2
 969 0030 1A80     		strh	r2, [r3]
 741:.\Generated_Source\PSoC4/ADC.c **** 
 742:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 970              		.loc 1 742 0
 971 0032 BB1C     		add	r3, r7, #2
 972 0034 0021     		mov	r1, #0
 973 0036 5B5E     		ldrsh	r3, [r3, r1]
 974 0038 184A     		ldr	r2, .L75+4
 975 003a 5A43     		mul	r2, r3
 743:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 976              		.loc 1 743 0
 977 003c BB1C     		add	r3, r7, #2
 978 003e 0021     		mov	r1, #0
 979 0040 5B5E     		ldrsh	r3, [r3, r1]
 980 0042 002B     		cmp	r3, #0
 981 0044 08DD     		ble	.L70
 982              		.loc 1 743 0 is_stmt 0 discriminator 1
 983 0046 164B     		ldr	r3, .L75+8
 984 0048 7968     		ldr	r1, [r7, #4]
 985 004a 8900     		lsl	r1, r1, #2
 986 004c CB58     		ldr	r3, [r1, r3]
 987 004e 002B     		cmp	r3, #0
 988 0050 00DA     		bge	.L71
 989 0052 0133     		add	r3, r3, #1
 990              	.L71:
 991 0054 5B10     		asr	r3, r3, #1
 992 0056 08E0     		b	.L72
 993              	.L70:
 994              		.loc 1 743 0 discriminator 2
 995 0058 114B     		ldr	r3, .L75+8
 996 005a 7968     		ldr	r1, [r7, #4]
 997 005c 8900     		lsl	r1, r1, #2
 998 005e CB58     		ldr	r3, [r1, r3]
 999 0060 002B     		cmp	r3, #0
 1000 0062 00DA     		bge	.L73
 1001 0064 0133     		add	r3, r3, #1
 1002              	.L73:
 1003 0066 5B10     		asr	r3, r3, #1
 1004 0068 5B42     		neg	r3, r3
 1005              	.L72:
 742:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1006              		.loc 1 742 0 is_stmt 1
 1007 006a D218     		add	r2, r2, r3
 744:.\Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 1008              		.loc 1 744 0
 1009 006c 0C4B     		ldr	r3, .L75+8
 1010 006e 7968     		ldr	r1, [r7, #4]
 1011 0070 8900     		lsl	r1, r1, #2
 1012 0072 CB58     		ldr	r3, [r1, r3]
 1013 0074 101C     		mov	r0, r2
 1014 0076 191C     		mov	r1, r3
 1015 0078 FFF7FEFF 		bl	__aeabi_idiv
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 32


 1016 007c 031C     		mov	r3, r0
 1017 007e 1A1C     		mov	r2, r3
 742:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1018              		.loc 1 742 0
 1019 0080 3B1C     		mov	r3, r7
 1020 0082 0E33     		add	r3, r3, #14
 1021 0084 1A80     		strh	r2, [r3]
 745:.\Generated_Source\PSoC4/ADC.c **** 
 746:.\Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1022              		.loc 1 746 0
 1023 0086 3B1C     		mov	r3, r7
 1024 0088 0E33     		add	r3, r3, #14
 1025 008a 1B88     		ldrh	r3, [r3]
 1026 008c 1BB2     		sxth	r3, r3
 747:.\Generated_Source\PSoC4/ADC.c ****     }
 1027              		.loc 1 747 0
 1028 008e 181C     		mov	r0, r3
 1029 0090 BD46     		mov	sp, r7
 1030 0092 04B0     		add	sp, sp, #16
 1031              		@ sp needed
 1032 0094 80BD     		pop	{r7, pc}
 1033              	.L76:
 1034 0096 C046     		.align	2
 1035              	.L75:
 1036 0098 00000000 		.word	ADC_offset
 1037 009c 10270000 		.word	10000
 1038 00a0 00000000 		.word	ADC_countsPer10Volt
 1039              		.cfi_endproc
 1040              	.LFE17:
 1041              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1042              		.global	__aeabi_lmul
 1043              		.global	__aeabi_ldivmod
 1044              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1045              		.align	2
 1046              		.global	ADC_CountsTo_uVolts
 1047              		.code	16
 1048              		.thumb_func
 1049              		.type	ADC_CountsTo_uVolts, %function
 1050              	ADC_CountsTo_uVolts:
 1051              	.LFB18:
 748:.\Generated_Source\PSoC4/ADC.c **** 
 749:.\Generated_Source\PSoC4/ADC.c **** 
 750:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 751:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 752:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 753:.\Generated_Source\PSoC4/ADC.c ****     *
 754:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 755:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 756:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 757:.\Generated_Source\PSoC4/ADC.c ****     *
 758:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 759:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 760:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 761:.\Generated_Source\PSoC4/ADC.c ****     *
 762:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 763:.\Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 764:.\Generated_Source\PSoC4/ADC.c ****     *
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 33


 765:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 766:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 767:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 768:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 769:.\Generated_Source\PSoC4/ADC.c ****     *
 770:.\Generated_Source\PSoC4/ADC.c ****     * Theory:
 771:.\Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 772:.\Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 773:.\Generated_Source\PSoC4/ADC.c ****     *  resolution.
 774:.\Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 775:.\Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 776:.\Generated_Source\PSoC4/ADC.c ****     *
 777:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 778:.\Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 779:.\Generated_Source\PSoC4/ADC.c ****     {
 1052              		.loc 1 779 0
 1053              		.cfi_startproc
 1054 0000 B0B5     		push	{r4, r5, r7, lr}
 1055              		.cfi_def_cfa_offset 16
 1056              		.cfi_offset 4, -16
 1057              		.cfi_offset 5, -12
 1058              		.cfi_offset 7, -8
 1059              		.cfi_offset 14, -4
 1060 0002 86B0     		sub	sp, sp, #24
 1061              		.cfi_def_cfa_offset 40
 1062 0004 00AF     		add	r7, sp, #0
 1063              		.cfi_def_cfa_register 7
 1064 0006 F860     		str	r0, [r7, #12]
 1065 0008 0A1C     		mov	r2, r1
 1066 000a 3B1C     		mov	r3, r7
 1067 000c 0A33     		add	r3, r3, #10
 1068 000e 1A80     		strh	r2, [r3]
 780:.\Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 781:.\Generated_Source\PSoC4/ADC.c **** 
 782:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 783:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1069              		.loc 1 783 0
 1070 0010 FB68     		ldr	r3, [r7, #12]
 1071 0012 002B     		cmp	r3, #0
 1072 0014 02D0     		beq	.L78
 1073              		.loc 1 783 0 is_stmt 0 discriminator 1
 1074 0016 0020     		mov	r0, #0
 1075 0018 FFF7FEFF 		bl	CyHalt
 1076              	.L78:
 784:.\Generated_Source\PSoC4/ADC.c **** 
 785:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 786:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 787:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 788:.\Generated_Source\PSoC4/ADC.c ****             {
 789:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 790:.\Generated_Source\PSoC4/ADC.c ****             }
 791:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 792:.\Generated_Source\PSoC4/ADC.c **** 
 793:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 794:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1077              		.loc 1 794 0 is_stmt 1
 1078 001c 3B1C     		mov	r3, r7
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 34


 1079 001e 0A33     		add	r3, r3, #10
 1080 0020 1A88     		ldrh	r2, [r3]
 1081 0022 1B4B     		ldr	r3, .L80+8
 1082 0024 F968     		ldr	r1, [r7, #12]
 1083 0026 4900     		lsl	r1, r1, #1
 1084 0028 CB5A     		ldrh	r3, [r1, r3]
 1085 002a 9BB2     		uxth	r3, r3
 1086 002c 9BB2     		uxth	r3, r3
 1087 002e D31A     		sub	r3, r2, r3
 1088 0030 9AB2     		uxth	r2, r3
 1089 0032 3B1C     		mov	r3, r7
 1090 0034 0A33     		add	r3, r3, #10
 1091 0036 1A80     		strh	r2, [r3]
 795:.\Generated_Source\PSoC4/ADC.c **** 
 796:.\Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1092              		.loc 1 796 0
 1093 0038 3B1C     		mov	r3, r7
 1094 003a 0A33     		add	r3, r3, #10
 1095 003c 1B88     		ldrh	r3, [r3]
 1096 003e 1BB2     		sxth	r3, r3
 1097 0040 3B60     		str	r3, [r7]
 1098 0042 DB17     		asr	r3, r3, #31
 1099 0044 7B60     		str	r3, [r7, #4]
 1100 0046 3868     		ldr	r0, [r7]
 1101 0048 7968     		ldr	r1, [r7, #4]
 1102 004a 104B     		ldr	r3, .L80+4
 1103 004c 0E4A     		ldr	r2, .L80
 1104 004e FFF7FEFF 		bl	__aeabi_lmul
 1105 0052 021C     		mov	r2, r0
 1106 0054 0B1C     		mov	r3, r1
 1107 0056 0F49     		ldr	r1, .L80+12
 1108 0058 F868     		ldr	r0, [r7, #12]
 1109 005a 8000     		lsl	r0, r0, #2
 1110 005c 4158     		ldr	r1, [r0, r1]
 1111 005e 0C1C     		mov	r4, r1
 1112 0060 C917     		asr	r1, r1, #31
 1113 0062 0D1C     		mov	r5, r1
 1114 0064 101C     		mov	r0, r2
 1115 0066 191C     		mov	r1, r3
 1116 0068 221C     		mov	r2, r4
 1117 006a 2B1C     		mov	r3, r5
 1118 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1119 0070 031C     		mov	r3, r0
 1120 0072 0C1C     		mov	r4, r1
 1121 0074 3B61     		str	r3, [r7, #16]
 1122 0076 7C61     		str	r4, [r7, #20]
 797:.\Generated_Source\PSoC4/ADC.c **** 
 798:.\Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1123              		.loc 1 798 0
 1124 0078 3B69     		ldr	r3, [r7, #16]
 799:.\Generated_Source\PSoC4/ADC.c ****     }
 1125              		.loc 1 799 0
 1126 007a 181C     		mov	r0, r3
 1127 007c BD46     		mov	sp, r7
 1128 007e 06B0     		add	sp, sp, #24
 1129              		@ sp needed
 1130 0080 B0BD     		pop	{r4, r5, r7, pc}
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 35


 1131              	.L81:
 1132 0082 C046C046 		.align	3
 1132      C046
 1133              	.L80:
 1134 0088 80969800 		.word	10000000
 1135 008c 00000000 		.word	0
 1136 0090 00000000 		.word	ADC_offset
 1137 0094 00000000 		.word	ADC_countsPer10Volt
 1138              		.cfi_endproc
 1139              	.LFE18:
 1140              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1141              		.global	__aeabi_i2f
 1142              		.global	__aeabi_fmul
 1143              		.global	__aeabi_fdiv
 1144              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1145              		.align	2
 1146              		.global	ADC_CountsTo_Volts
 1147              		.code	16
 1148              		.thumb_func
 1149              		.type	ADC_CountsTo_Volts, %function
 1150              	ADC_CountsTo_Volts:
 1151              	.LFB19:
 800:.\Generated_Source\PSoC4/ADC.c **** 
 801:.\Generated_Source\PSoC4/ADC.c **** 
 802:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 803:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 804:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 805:.\Generated_Source\PSoC4/ADC.c ****     *
 806:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 807:.\Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 808:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 809:.\Generated_Source\PSoC4/ADC.c ****     *
 810:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 811:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 812:.\Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 813:.\Generated_Source\PSoC4/ADC.c ****     *
 814:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 815:.\Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 816:.\Generated_Source\PSoC4/ADC.c ****     *
 817:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 818:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 819:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 820:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 821:.\Generated_Source\PSoC4/ADC.c ****     *
 822:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 823:.\Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 824:.\Generated_Source\PSoC4/ADC.c ****     {
 1152              		.loc 1 824 0
 1153              		.cfi_startproc
 1154 0000 90B5     		push	{r4, r7, lr}
 1155              		.cfi_def_cfa_offset 12
 1156              		.cfi_offset 4, -12
 1157              		.cfi_offset 7, -8
 1158              		.cfi_offset 14, -4
 1159 0002 85B0     		sub	sp, sp, #20
 1160              		.cfi_def_cfa_offset 32
 1161 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 36


 1162              		.cfi_def_cfa_register 7
 1163 0006 7860     		str	r0, [r7, #4]
 1164 0008 0A1C     		mov	r2, r1
 1165 000a BB1C     		add	r3, r7, #2
 1166 000c 1A80     		strh	r2, [r3]
 825:.\Generated_Source\PSoC4/ADC.c ****         float32 volts;
 826:.\Generated_Source\PSoC4/ADC.c **** 
 827:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 828:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1167              		.loc 1 828 0
 1168 000e 7B68     		ldr	r3, [r7, #4]
 1169 0010 002B     		cmp	r3, #0
 1170 0012 02D0     		beq	.L83
 1171              		.loc 1 828 0 is_stmt 0 discriminator 1
 1172 0014 0020     		mov	r0, #0
 1173 0016 FFF7FEFF 		bl	CyHalt
 1174              	.L83:
 829:.\Generated_Source\PSoC4/ADC.c **** 
 830:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 831:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 832:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 833:.\Generated_Source\PSoC4/ADC.c ****             {
 834:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 835:.\Generated_Source\PSoC4/ADC.c ****             }
 836:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 837:.\Generated_Source\PSoC4/ADC.c **** 
 838:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 839:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1175              		.loc 1 839 0 is_stmt 1
 1176 001a BB1C     		add	r3, r7, #2
 1177 001c 1A88     		ldrh	r2, [r3]
 1178 001e 154B     		ldr	r3, .L85
 1179 0020 7968     		ldr	r1, [r7, #4]
 1180 0022 4900     		lsl	r1, r1, #1
 1181 0024 CB5A     		ldrh	r3, [r1, r3]
 1182 0026 9BB2     		uxth	r3, r3
 1183 0028 9BB2     		uxth	r3, r3
 1184 002a D31A     		sub	r3, r2, r3
 1185 002c 9AB2     		uxth	r2, r3
 1186 002e BB1C     		add	r3, r7, #2
 1187 0030 1A80     		strh	r2, [r3]
 840:.\Generated_Source\PSoC4/ADC.c **** 
 841:.\Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
 1188              		.loc 1 841 0
 1189 0032 BB1C     		add	r3, r7, #2
 1190 0034 0022     		mov	r2, #0
 1191 0036 9B5E     		ldrsh	r3, [r3, r2]
 1192 0038 181C     		mov	r0, r3
 1193 003a FFF7FEFF 		bl	__aeabi_i2f
 1194 003e 031C     		add	r3, r0, #0
 1195 0040 181C     		add	r0, r3, #0
 1196 0042 0D49     		ldr	r1, .L85+4
 1197 0044 FFF7FEFF 		bl	__aeabi_fmul
 1198 0048 031C     		add	r3, r0, #0
 1199 004a 1C1C     		add	r4, r3, #0
 1200 004c 0B4B     		ldr	r3, .L85+8
 1201 004e 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 37


 1202 0050 9200     		lsl	r2, r2, #2
 1203 0052 D358     		ldr	r3, [r2, r3]
 1204 0054 181C     		mov	r0, r3
 1205 0056 FFF7FEFF 		bl	__aeabi_i2f
 1206 005a 031C     		add	r3, r0, #0
 1207 005c 201C     		add	r0, r4, #0
 1208 005e 191C     		add	r1, r3, #0
 1209 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1210 0064 031C     		add	r3, r0, #0
 1211 0066 FB60     		str	r3, [r7, #12]
 842:.\Generated_Source\PSoC4/ADC.c **** 
 843:.\Generated_Source\PSoC4/ADC.c ****         return( volts );
 1212              		.loc 1 843 0
 1213 0068 FB68     		ldr	r3, [r7, #12]
 844:.\Generated_Source\PSoC4/ADC.c ****     }
 1214              		.loc 1 844 0
 1215 006a 181C     		add	r0, r3, #0
 1216 006c BD46     		mov	sp, r7
 1217 006e 05B0     		add	sp, sp, #20
 1218              		@ sp needed
 1219 0070 90BD     		pop	{r4, r7, pc}
 1220              	.L86:
 1221 0072 C046     		.align	2
 1222              	.L85:
 1223 0074 00000000 		.word	ADC_offset
 1224 0078 00002041 		.word	1092616192
 1225 007c 00000000 		.word	ADC_countsPer10Volt
 1226              		.cfi_endproc
 1227              	.LFE19:
 1228              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1229              		.text
 1230              	.Letext0:
 1231              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1232              		.section	.debug_info,"",%progbits
 1233              	.Ldebug_info0:
 1234 0000 70040000 		.4byte	0x470
 1235 0004 0400     		.2byte	0x4
 1236 0006 00000000 		.4byte	.Ldebug_abbrev0
 1237 000a 04       		.byte	0x4
 1238 000b 01       		.uleb128 0x1
 1239 000c 11030000 		.4byte	.LASF59
 1240 0010 01       		.byte	0x1
 1241 0011 27000000 		.4byte	.LASF60
 1242 0015 5D000000 		.4byte	.LASF61
 1243 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1244 001d 00000000 		.4byte	0
 1245 0021 00000000 		.4byte	.Ldebug_line0
 1246 0025 02       		.uleb128 0x2
 1247 0026 01       		.byte	0x1
 1248 0027 06       		.byte	0x6
 1249 0028 F9020000 		.4byte	.LASF0
 1250 002c 02       		.uleb128 0x2
 1251 002d 01       		.byte	0x1
 1252 002e 08       		.byte	0x8
 1253 002f 36010000 		.4byte	.LASF1
 1254 0033 02       		.uleb128 0x2
 1255 0034 02       		.byte	0x2
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 38


 1256 0035 05       		.byte	0x5
 1257 0036 DE000000 		.4byte	.LASF2
 1258 003a 02       		.uleb128 0x2
 1259 003b 02       		.byte	0x2
 1260 003c 07       		.byte	0x7
 1261 003d CB000000 		.4byte	.LASF3
 1262 0041 02       		.uleb128 0x2
 1263 0042 04       		.byte	0x4
 1264 0043 05       		.byte	0x5
 1265 0044 EB020000 		.4byte	.LASF4
 1266 0048 02       		.uleb128 0x2
 1267 0049 04       		.byte	0x4
 1268 004a 07       		.byte	0x7
 1269 004b 5B010000 		.4byte	.LASF5
 1270 004f 02       		.uleb128 0x2
 1271 0050 08       		.byte	0x8
 1272 0051 05       		.byte	0x5
 1273 0052 00000000 		.4byte	.LASF6
 1274 0056 02       		.uleb128 0x2
 1275 0057 08       		.byte	0x8
 1276 0058 07       		.byte	0x7
 1277 0059 16020000 		.4byte	.LASF7
 1278 005d 03       		.uleb128 0x3
 1279 005e 04       		.byte	0x4
 1280 005f 05       		.byte	0x5
 1281 0060 696E7400 		.ascii	"int\000"
 1282 0064 02       		.uleb128 0x2
 1283 0065 04       		.byte	0x4
 1284 0066 07       		.byte	0x7
 1285 0067 F7010000 		.4byte	.LASF8
 1286 006b 04       		.uleb128 0x4
 1287 006c BD020000 		.4byte	.LASF9
 1288 0070 02       		.byte	0x2
 1289 0071 A1       		.byte	0xa1
 1290 0072 2C000000 		.4byte	0x2c
 1291 0076 04       		.uleb128 0x4
 1292 0077 CE010000 		.4byte	.LASF10
 1293 007b 02       		.byte	0x2
 1294 007c A2       		.byte	0xa2
 1295 007d 3A000000 		.4byte	0x3a
 1296 0081 04       		.uleb128 0x4
 1297 0082 DF010000 		.4byte	.LASF11
 1298 0086 02       		.byte	0x2
 1299 0087 A3       		.byte	0xa3
 1300 0088 48000000 		.4byte	0x48
 1301 008c 04       		.uleb128 0x4
 1302 008d 55010000 		.4byte	.LASF12
 1303 0091 02       		.byte	0x2
 1304 0092 A5       		.byte	0xa5
 1305 0093 33000000 		.4byte	0x33
 1306 0097 04       		.uleb128 0x4
 1307 0098 6D010000 		.4byte	.LASF13
 1308 009c 02       		.byte	0x2
 1309 009d A6       		.byte	0xa6
 1310 009e 41000000 		.4byte	0x41
 1311 00a2 04       		.uleb128 0x4
 1312 00a3 0D010000 		.4byte	.LASF14
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 39


 1313 00a7 02       		.byte	0x2
 1314 00a8 A7       		.byte	0xa7
 1315 00a9 AD000000 		.4byte	0xad
 1316 00ad 02       		.uleb128 0x2
 1317 00ae 04       		.byte	0x4
 1318 00af 04       		.byte	0x4
 1319 00b0 4D000000 		.4byte	.LASF15
 1320 00b4 02       		.uleb128 0x2
 1321 00b5 08       		.byte	0x8
 1322 00b6 04       		.byte	0x4
 1323 00b7 B6010000 		.4byte	.LASF16
 1324 00bb 04       		.uleb128 0x4
 1325 00bc 8D030000 		.4byte	.LASF17
 1326 00c0 02       		.byte	0x2
 1327 00c1 AC       		.byte	0xac
 1328 00c2 4F000000 		.4byte	0x4f
 1329 00c6 02       		.uleb128 0x2
 1330 00c7 01       		.byte	0x1
 1331 00c8 08       		.byte	0x8
 1332 00c9 F4020000 		.4byte	.LASF18
 1333 00cd 05       		.uleb128 0x5
 1334 00ce 21000000 		.4byte	.LASF19
 1335 00d2 02       		.byte	0x2
 1336 00d3 4D01     		.2byte	0x14d
 1337 00d5 D9000000 		.4byte	0xd9
 1338 00d9 06       		.uleb128 0x6
 1339 00da 81000000 		.4byte	0x81
 1340 00de 02       		.uleb128 0x2
 1341 00df 04       		.byte	0x4
 1342 00e0 07       		.byte	0x7
 1343 00e1 59020000 		.4byte	.LASF20
 1344 00e5 07       		.uleb128 0x7
 1345 00e6 34020000 		.4byte	.LASF24
 1346 00ea 01       		.byte	0x1
 1347 00eb 3F       		.byte	0x3f
 1348 00ec 00000000 		.4byte	.LFB2
 1349 00f0 24000000 		.4byte	.LFE2-.LFB2
 1350 00f4 01       		.uleb128 0x1
 1351 00f5 9C       		.byte	0x9c
 1352 00f6 08       		.uleb128 0x8
 1353 00f7 3E020000 		.4byte	.LASF35
 1354 00fb 01       		.byte	0x1
 1355 00fc 5E       		.byte	0x5e
 1356 00fd 00000000 		.4byte	.LFB3
 1357 0101 D8010000 		.4byte	.LFE3-.LFB3
 1358 0105 01       		.uleb128 0x1
 1359 0106 9C       		.byte	0x9c
 1360 0107 36010000 		.4byte	0x136
 1361 010b 09       		.uleb128 0x9
 1362 010c 9F020000 		.4byte	.LASF21
 1363 0110 01       		.byte	0x1
 1364 0111 60       		.byte	0x60
 1365 0112 81000000 		.4byte	0x81
 1366 0116 02       		.uleb128 0x2
 1367 0117 91       		.byte	0x91
 1368 0118 6C       		.sleb128 -20
 1369 0119 09       		.uleb128 0x9
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 40


 1370 011a 20010000 		.4byte	.LASF22
 1371 011e 01       		.byte	0x1
 1372 011f 61       		.byte	0x61
 1373 0120 81000000 		.4byte	0x81
 1374 0124 02       		.uleb128 0x2
 1375 0125 91       		.byte	0x91
 1376 0126 64       		.sleb128 -28
 1377 0127 09       		.uleb128 0x9
 1378 0128 0F020000 		.4byte	.LASF23
 1379 012c 01       		.byte	0x1
 1380 012d 62       		.byte	0x62
 1381 012e 97000000 		.4byte	0x97
 1382 0132 02       		.uleb128 0x2
 1383 0133 91       		.byte	0x91
 1384 0134 68       		.sleb128 -24
 1385 0135 00       		.byte	0
 1386 0136 0A       		.uleb128 0xa
 1387 0137 04020000 		.4byte	.LASF25
 1388 013b 01       		.byte	0x1
 1389 013c 2A01     		.2byte	0x12a
 1390 013e 00000000 		.4byte	.LFB4
 1391 0142 38000000 		.4byte	.LFE4-.LFB4
 1392 0146 01       		.uleb128 0x1
 1393 0147 9C       		.byte	0x9c
 1394 0148 0B       		.uleb128 0xb
 1395 0149 93030000 		.4byte	.LASF26
 1396 014d 01       		.byte	0x1
 1397 014e 4D01     		.2byte	0x14d
 1398 0150 00000000 		.4byte	.LFB5
 1399 0154 18000000 		.4byte	.LFE5-.LFB5
 1400 0158 01       		.uleb128 0x1
 1401 0159 9C       		.byte	0x9c
 1402 015a 0B       		.uleb128 0xb
 1403 015b 89020000 		.4byte	.LASF27
 1404 015f 01       		.byte	0x1
 1405 0160 6701     		.2byte	0x167
 1406 0162 00000000 		.4byte	.LFB6
 1407 0166 14000000 		.4byte	.LFE6-.LFB6
 1408 016a 01       		.uleb128 0x1
 1409 016b 9C       		.byte	0x9c
 1410 016c 0B       		.uleb128 0xb
 1411 016d AD020000 		.4byte	.LASF28
 1412 0171 01       		.byte	0x1
 1413 0172 8001     		.2byte	0x180
 1414 0174 00000000 		.4byte	.LFB7
 1415 0178 08000000 		.4byte	.LFE7-.LFB7
 1416 017c 01       		.uleb128 0x1
 1417 017d 9C       		.byte	0x9c
 1418 017e 0C       		.uleb128 0xc
 1419 017f A2010000 		.4byte	.LASF30
 1420 0183 01       		.byte	0x1
 1421 0184 A201     		.2byte	0x1a2
 1422 0186 81000000 		.4byte	0x81
 1423 018a 00000000 		.4byte	.LFB8
 1424 018e 48000000 		.4byte	.LFE8-.LFB8
 1425 0192 01       		.uleb128 0x1
 1426 0193 9C       		.byte	0x9c
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 41


 1427 0194 B7010000 		.4byte	0x1b7
 1428 0198 0D       		.uleb128 0xd
 1429 0199 A5020000 		.4byte	.LASF32
 1430 019d 01       		.byte	0x1
 1431 019e A201     		.2byte	0x1a2
 1432 01a0 81000000 		.4byte	0x81
 1433 01a4 02       		.uleb128 0x2
 1434 01a5 91       		.byte	0x91
 1435 01a6 6C       		.sleb128 -20
 1436 01a7 0E       		.uleb128 0xe
 1437 01a8 06010000 		.4byte	.LASF29
 1438 01ac 01       		.byte	0x1
 1439 01ad A401     		.2byte	0x1a4
 1440 01af 81000000 		.4byte	0x81
 1441 01b3 02       		.uleb128 0x2
 1442 01b4 91       		.byte	0x91
 1443 01b5 74       		.sleb128 -12
 1444 01b6 00       		.byte	0
 1445 01b7 0F       		.uleb128 0xf
 1446 01b8 73010000 		.4byte	.LASF31
 1447 01bc 01       		.byte	0x1
 1448 01bd D801     		.2byte	0x1d8
 1449 01bf 8C000000 		.4byte	0x8c
 1450 01c3 00000000 		.4byte	.LFB9
 1451 01c7 44000000 		.4byte	.LFE9-.LFB9
 1452 01cb 01       		.uleb128 0x1
 1453 01cc 9C       		.byte	0x9c
 1454 01cd F0010000 		.4byte	0x1f0
 1455 01d1 0D       		.uleb128 0xd
 1456 01d2 4D020000 		.4byte	.LASF33
 1457 01d6 01       		.byte	0x1
 1458 01d7 D801     		.2byte	0x1d8
 1459 01d9 81000000 		.4byte	0x81
 1460 01dd 02       		.uleb128 0x2
 1461 01de 91       		.byte	0x91
 1462 01df 6C       		.sleb128 -20
 1463 01e0 0E       		.uleb128 0xe
 1464 01e1 2D020000 		.4byte	.LASF34
 1465 01e5 01       		.byte	0x1
 1466 01e6 DA01     		.2byte	0x1da
 1467 01e8 81000000 		.4byte	0x81
 1468 01ec 02       		.uleb128 0x2
 1469 01ed 91       		.byte	0x91
 1470 01ee 74       		.sleb128 -12
 1471 01ef 00       		.byte	0
 1472 01f0 10       		.uleb128 0x10
 1473 01f1 83010000 		.4byte	.LASF36
 1474 01f5 01       		.byte	0x1
 1475 01f6 0502     		.2byte	0x205
 1476 01f8 00000000 		.4byte	.LFB10
 1477 01fc 1C000000 		.4byte	.LFE10-.LFB10
 1478 0200 01       		.uleb128 0x1
 1479 0201 9C       		.byte	0x9c
 1480 0202 16020000 		.4byte	0x216
 1481 0206 0D       		.uleb128 0xd
 1482 0207 9A020000 		.4byte	.LASF37
 1483 020b 01       		.byte	0x1
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 42


 1484 020c 0502     		.2byte	0x205
 1485 020e 81000000 		.4byte	0x81
 1486 0212 02       		.uleb128 0x2
 1487 0213 91       		.byte	0x91
 1488 0214 74       		.sleb128 -12
 1489 0215 00       		.byte	0
 1490 0216 10       		.uleb128 0x10
 1491 0217 F6000000 		.4byte	.LASF38
 1492 021b 01       		.byte	0x1
 1493 021c 3102     		.2byte	0x231
 1494 021e 00000000 		.4byte	.LFB11
 1495 0222 30000000 		.4byte	.LFE11-.LFB11
 1496 0226 01       		.uleb128 0x1
 1497 0227 9C       		.byte	0x9c
 1498 0228 3C020000 		.4byte	0x23c
 1499 022c 0D       		.uleb128 0xd
 1500 022d BD010000 		.4byte	.LASF39
 1501 0231 01       		.byte	0x1
 1502 0232 3102     		.2byte	0x231
 1503 0234 81000000 		.4byte	0x81
 1504 0238 02       		.uleb128 0x2
 1505 0239 91       		.byte	0x91
 1506 023a 74       		.sleb128 -12
 1507 023b 00       		.byte	0
 1508 023c 10       		.uleb128 0x10
 1509 023d 44010000 		.4byte	.LASF40
 1510 0241 01       		.byte	0x1
 1511 0242 4602     		.2byte	0x246
 1512 0244 00000000 		.4byte	.LFB12
 1513 0248 2C000000 		.4byte	.LFE12-.LFB12
 1514 024c 01       		.uleb128 0x1
 1515 024d 9C       		.byte	0x9c
 1516 024e 62020000 		.4byte	0x262
 1517 0252 0D       		.uleb128 0xd
 1518 0253 53000000 		.4byte	.LASF41
 1519 0257 01       		.byte	0x1
 1520 0258 4602     		.2byte	0x246
 1521 025a 81000000 		.4byte	0x81
 1522 025e 02       		.uleb128 0x2
 1523 025f 91       		.byte	0x91
 1524 0260 74       		.sleb128 -12
 1525 0261 00       		.byte	0
 1526 0262 10       		.uleb128 0x10
 1527 0263 E6010000 		.4byte	.LASF42
 1528 0267 01       		.byte	0x1
 1529 0268 5E02     		.2byte	0x25e
 1530 026a 00000000 		.4byte	.LFB13
 1531 026e 1C000000 		.4byte	.LFE13-.LFB13
 1532 0272 01       		.uleb128 0x1
 1533 0273 9C       		.byte	0x9c
 1534 0274 88020000 		.4byte	0x288
 1535 0278 0D       		.uleb128 0xd
 1536 0279 9A020000 		.4byte	.LASF37
 1537 027d 01       		.byte	0x1
 1538 027e 5E02     		.2byte	0x25e
 1539 0280 81000000 		.4byte	0x81
 1540 0284 02       		.uleb128 0x2
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 43


 1541 0285 91       		.byte	0x91
 1542 0286 74       		.sleb128 -12
 1543 0287 00       		.byte	0
 1544 0288 10       		.uleb128 0x10
 1545 0289 93010000 		.4byte	.LASF43
 1546 028d 01       		.byte	0x1
 1547 028e 7502     		.2byte	0x275
 1548 0290 00000000 		.4byte	.LFB14
 1549 0294 1C000000 		.4byte	.LFE14-.LFB14
 1550 0298 01       		.uleb128 0x1
 1551 0299 9C       		.byte	0x9c
 1552 029a AE020000 		.4byte	0x2ae
 1553 029e 0D       		.uleb128 0xd
 1554 029f 9A020000 		.4byte	.LASF37
 1555 02a3 01       		.byte	0x1
 1556 02a4 7502     		.2byte	0x275
 1557 02a6 81000000 		.4byte	0x81
 1558 02aa 02       		.uleb128 0x2
 1559 02ab 91       		.byte	0x91
 1560 02ac 74       		.sleb128 -12
 1561 02ad 00       		.byte	0
 1562 02ae 11       		.uleb128 0x11
 1563 02af E8000000 		.4byte	.LASF44
 1564 02b3 01       		.byte	0x1
 1565 02b4 9102     		.2byte	0x291
 1566 02b6 00000000 		.4byte	.LFB15
 1567 02ba 30000000 		.4byte	.LFE15-.LFB15
 1568 02be 01       		.uleb128 0x1
 1569 02bf 9C       		.byte	0x9c
 1570 02c0 E3020000 		.4byte	0x2e3
 1571 02c4 0D       		.uleb128 0xd
 1572 02c5 4D020000 		.4byte	.LASF33
 1573 02c9 01       		.byte	0x1
 1574 02ca 9102     		.2byte	0x291
 1575 02cc 81000000 		.4byte	0x81
 1576 02d0 02       		.uleb128 0x2
 1577 02d1 91       		.byte	0x91
 1578 02d2 74       		.sleb128 -12
 1579 02d3 0D       		.uleb128 0xd
 1580 02d4 46000000 		.4byte	.LASF45
 1581 02d8 01       		.byte	0x1
 1582 02d9 9102     		.2byte	0x291
 1583 02db 8C000000 		.4byte	0x8c
 1584 02df 02       		.uleb128 0x2
 1585 02e0 91       		.byte	0x91
 1586 02e1 72       		.sleb128 -14
 1587 02e2 00       		.byte	0
 1588 02e3 11       		.uleb128 0x11
 1589 02e4 2A010000 		.4byte	.LASF46
 1590 02e8 01       		.byte	0x1
 1591 02e9 B302     		.2byte	0x2b3
 1592 02eb 00000000 		.4byte	.LFB16
 1593 02ef 2C000000 		.4byte	.LFE16-.LFB16
 1594 02f3 01       		.uleb128 0x1
 1595 02f4 9C       		.byte	0x9c
 1596 02f5 18030000 		.4byte	0x318
 1597 02f9 0D       		.uleb128 0xd
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 44


 1598 02fa 4D020000 		.4byte	.LASF33
 1599 02fe 01       		.byte	0x1
 1600 02ff B302     		.2byte	0x2b3
 1601 0301 81000000 		.4byte	0x81
 1602 0305 02       		.uleb128 0x2
 1603 0306 91       		.byte	0x91
 1604 0307 74       		.sleb128 -12
 1605 0308 0D       		.uleb128 0xd
 1606 0309 C6010000 		.4byte	.LASF47
 1607 030d 01       		.byte	0x1
 1608 030e B302     		.2byte	0x2b3
 1609 0310 97000000 		.4byte	0x97
 1610 0314 02       		.uleb128 0x2
 1611 0315 91       		.byte	0x91
 1612 0316 70       		.sleb128 -16
 1613 0317 00       		.byte	0
 1614 0318 0F       		.uleb128 0xf
 1615 0319 D7020000 		.4byte	.LASF48
 1616 031d 01       		.byte	0x1
 1617 031e D402     		.2byte	0x2d4
 1618 0320 8C000000 		.4byte	0x8c
 1619 0324 00000000 		.4byte	.LFB17
 1620 0328 A4000000 		.4byte	.LFE17-.LFB17
 1621 032c 01       		.uleb128 0x1
 1622 032d 9C       		.byte	0x9c
 1623 032e 60030000 		.4byte	0x360
 1624 0332 0D       		.uleb128 0xd
 1625 0333 4D020000 		.4byte	.LASF33
 1626 0337 01       		.byte	0x1
 1627 0338 D402     		.2byte	0x2d4
 1628 033a 81000000 		.4byte	0x81
 1629 033e 02       		.uleb128 0x2
 1630 033f 91       		.byte	0x91
 1631 0340 6C       		.sleb128 -20
 1632 0341 0D       		.uleb128 0xd
 1633 0342 D5010000 		.4byte	.LASF49
 1634 0346 01       		.byte	0x1
 1635 0347 D402     		.2byte	0x2d4
 1636 0349 8C000000 		.4byte	0x8c
 1637 034d 02       		.uleb128 0x2
 1638 034e 91       		.byte	0x91
 1639 034f 6A       		.sleb128 -22
 1640 0350 0E       		.uleb128 0xe
 1641 0351 52020000 		.4byte	.LASF50
 1642 0355 01       		.byte	0x1
 1643 0356 D602     		.2byte	0x2d6
 1644 0358 8C000000 		.4byte	0x8c
 1645 035c 02       		.uleb128 0x2
 1646 035d 91       		.byte	0x91
 1647 035e 76       		.sleb128 -10
 1648 035f 00       		.byte	0
 1649 0360 0F       		.uleb128 0xf
 1650 0361 62020000 		.4byte	.LASF51
 1651 0365 01       		.byte	0x1
 1652 0366 0A03     		.2byte	0x30a
 1653 0368 97000000 		.4byte	0x97
 1654 036c 00000000 		.4byte	.LFB18
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 45


 1655 0370 98000000 		.4byte	.LFE18-.LFB18
 1656 0374 01       		.uleb128 0x1
 1657 0375 9C       		.byte	0x9c
 1658 0376 A8030000 		.4byte	0x3a8
 1659 037a 0D       		.uleb128 0xd
 1660 037b 4D020000 		.4byte	.LASF33
 1661 037f 01       		.byte	0x1
 1662 0380 0A03     		.2byte	0x30a
 1663 0382 81000000 		.4byte	0x81
 1664 0386 02       		.uleb128 0x2
 1665 0387 91       		.byte	0x91
 1666 0388 64       		.sleb128 -28
 1667 0389 0D       		.uleb128 0xd
 1668 038a D5010000 		.4byte	.LASF49
 1669 038e 01       		.byte	0x1
 1670 038f 0A03     		.2byte	0x30a
 1671 0391 8C000000 		.4byte	0x8c
 1672 0395 02       		.uleb128 0x2
 1673 0396 91       		.byte	0x91
 1674 0397 62       		.sleb128 -30
 1675 0398 0E       		.uleb128 0xe
 1676 0399 C4000000 		.4byte	.LASF52
 1677 039d 01       		.byte	0x1
 1678 039e 0C03     		.2byte	0x30c
 1679 03a0 BB000000 		.4byte	0xbb
 1680 03a4 02       		.uleb128 0x2
 1681 03a5 91       		.byte	0x91
 1682 03a6 68       		.sleb128 -24
 1683 03a7 00       		.byte	0
 1684 03a8 0F       		.uleb128 0xf
 1685 03a9 76020000 		.4byte	.LASF53
 1686 03ad 01       		.byte	0x1
 1687 03ae 3703     		.2byte	0x337
 1688 03b0 A2000000 		.4byte	0xa2
 1689 03b4 00000000 		.4byte	.LFB19
 1690 03b8 80000000 		.4byte	.LFE19-.LFB19
 1691 03bc 01       		.uleb128 0x1
 1692 03bd 9C       		.byte	0x9c
 1693 03be F0030000 		.4byte	0x3f0
 1694 03c2 0D       		.uleb128 0xd
 1695 03c3 4D020000 		.4byte	.LASF33
 1696 03c7 01       		.byte	0x1
 1697 03c8 3703     		.2byte	0x337
 1698 03ca 81000000 		.4byte	0x81
 1699 03ce 02       		.uleb128 0x2
 1700 03cf 91       		.byte	0x91
 1701 03d0 64       		.sleb128 -28
 1702 03d1 0D       		.uleb128 0xd
 1703 03d2 D5010000 		.4byte	.LASF49
 1704 03d6 01       		.byte	0x1
 1705 03d7 3703     		.2byte	0x337
 1706 03d9 8C000000 		.4byte	0x8c
 1707 03dd 02       		.uleb128 0x2
 1708 03de 91       		.byte	0x91
 1709 03df 62       		.sleb128 -30
 1710 03e0 0E       		.uleb128 0xe
 1711 03e1 47020000 		.4byte	.LASF54
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 46


 1712 03e5 01       		.byte	0x1
 1713 03e6 3903     		.2byte	0x339
 1714 03e8 A2000000 		.4byte	0xa2
 1715 03ec 02       		.uleb128 0x2
 1716 03ed 91       		.byte	0x91
 1717 03ee 6C       		.sleb128 -20
 1718 03ef 00       		.byte	0
 1719 03f0 12       		.uleb128 0x12
 1720 03f1 81000000 		.4byte	0x81
 1721 03f5 00040000 		.4byte	0x400
 1722 03f9 13       		.uleb128 0x13
 1723 03fa DE000000 		.4byte	0xde
 1724 03fe 00       		.byte	0
 1725 03ff 00       		.byte	0
 1726 0400 09       		.uleb128 0x9
 1727 0401 0E000000 		.4byte	.LASF55
 1728 0405 01       		.byte	0x1
 1729 0406 21       		.byte	0x21
 1730 0407 11040000 		.4byte	0x411
 1731 040b 05       		.uleb128 0x5
 1732 040c 03       		.byte	0x3
 1733 040d 00000000 		.4byte	ADC_channelsConfig
 1734 0411 14       		.uleb128 0x14
 1735 0412 F0030000 		.4byte	0x3f0
 1736 0416 15       		.uleb128 0x15
 1737 0417 05030000 		.4byte	.LASF56
 1738 041b 01       		.byte	0x1
 1739 041c 18       		.byte	0x18
 1740 041d 6B000000 		.4byte	0x6b
 1741 0421 05       		.uleb128 0x5
 1742 0422 03       		.byte	0x3
 1743 0423 00000000 		.4byte	ADC_initVar
 1744 0427 12       		.uleb128 0x12
 1745 0428 8C000000 		.4byte	0x8c
 1746 042c 37040000 		.4byte	0x437
 1747 0430 13       		.uleb128 0x13
 1748 0431 DE000000 		.4byte	0xde
 1749 0435 00       		.byte	0
 1750 0436 00       		.byte	0
 1751 0437 15       		.uleb128 0x15
 1752 0438 15010000 		.4byte	.LASF57
 1753 043c 01       		.byte	0x1
 1754 043d 19       		.byte	0x19
 1755 043e 48040000 		.4byte	0x448
 1756 0442 05       		.uleb128 0x5
 1757 0443 03       		.byte	0x3
 1758 0444 00000000 		.4byte	ADC_offset
 1759 0448 06       		.uleb128 0x6
 1760 0449 27040000 		.4byte	0x427
 1761 044d 12       		.uleb128 0x12
 1762 044e 97000000 		.4byte	0x97
 1763 0452 5D040000 		.4byte	0x45d
 1764 0456 13       		.uleb128 0x13
 1765 0457 DE000000 		.4byte	0xde
 1766 045b 00       		.byte	0
 1767 045c 00       		.byte	0
 1768 045d 15       		.uleb128 0x15
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 47


 1769 045e C3020000 		.4byte	.LASF58
 1770 0462 01       		.byte	0x1
 1771 0463 1A       		.byte	0x1a
 1772 0464 6E040000 		.4byte	0x46e
 1773 0468 05       		.uleb128 0x5
 1774 0469 03       		.byte	0x3
 1775 046a 00000000 		.4byte	ADC_countsPer10Volt
 1776 046e 06       		.uleb128 0x6
 1777 046f 4D040000 		.4byte	0x44d
 1778 0473 00       		.byte	0
 1779              		.section	.debug_abbrev,"",%progbits
 1780              	.Ldebug_abbrev0:
 1781 0000 01       		.uleb128 0x1
 1782 0001 11       		.uleb128 0x11
 1783 0002 01       		.byte	0x1
 1784 0003 25       		.uleb128 0x25
 1785 0004 0E       		.uleb128 0xe
 1786 0005 13       		.uleb128 0x13
 1787 0006 0B       		.uleb128 0xb
 1788 0007 03       		.uleb128 0x3
 1789 0008 0E       		.uleb128 0xe
 1790 0009 1B       		.uleb128 0x1b
 1791 000a 0E       		.uleb128 0xe
 1792 000b 55       		.uleb128 0x55
 1793 000c 17       		.uleb128 0x17
 1794 000d 11       		.uleb128 0x11
 1795 000e 01       		.uleb128 0x1
 1796 000f 10       		.uleb128 0x10
 1797 0010 17       		.uleb128 0x17
 1798 0011 00       		.byte	0
 1799 0012 00       		.byte	0
 1800 0013 02       		.uleb128 0x2
 1801 0014 24       		.uleb128 0x24
 1802 0015 00       		.byte	0
 1803 0016 0B       		.uleb128 0xb
 1804 0017 0B       		.uleb128 0xb
 1805 0018 3E       		.uleb128 0x3e
 1806 0019 0B       		.uleb128 0xb
 1807 001a 03       		.uleb128 0x3
 1808 001b 0E       		.uleb128 0xe
 1809 001c 00       		.byte	0
 1810 001d 00       		.byte	0
 1811 001e 03       		.uleb128 0x3
 1812 001f 24       		.uleb128 0x24
 1813 0020 00       		.byte	0
 1814 0021 0B       		.uleb128 0xb
 1815 0022 0B       		.uleb128 0xb
 1816 0023 3E       		.uleb128 0x3e
 1817 0024 0B       		.uleb128 0xb
 1818 0025 03       		.uleb128 0x3
 1819 0026 08       		.uleb128 0x8
 1820 0027 00       		.byte	0
 1821 0028 00       		.byte	0
 1822 0029 04       		.uleb128 0x4
 1823 002a 16       		.uleb128 0x16
 1824 002b 00       		.byte	0
 1825 002c 03       		.uleb128 0x3
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 48


 1826 002d 0E       		.uleb128 0xe
 1827 002e 3A       		.uleb128 0x3a
 1828 002f 0B       		.uleb128 0xb
 1829 0030 3B       		.uleb128 0x3b
 1830 0031 0B       		.uleb128 0xb
 1831 0032 49       		.uleb128 0x49
 1832 0033 13       		.uleb128 0x13
 1833 0034 00       		.byte	0
 1834 0035 00       		.byte	0
 1835 0036 05       		.uleb128 0x5
 1836 0037 16       		.uleb128 0x16
 1837 0038 00       		.byte	0
 1838 0039 03       		.uleb128 0x3
 1839 003a 0E       		.uleb128 0xe
 1840 003b 3A       		.uleb128 0x3a
 1841 003c 0B       		.uleb128 0xb
 1842 003d 3B       		.uleb128 0x3b
 1843 003e 05       		.uleb128 0x5
 1844 003f 49       		.uleb128 0x49
 1845 0040 13       		.uleb128 0x13
 1846 0041 00       		.byte	0
 1847 0042 00       		.byte	0
 1848 0043 06       		.uleb128 0x6
 1849 0044 35       		.uleb128 0x35
 1850 0045 00       		.byte	0
 1851 0046 49       		.uleb128 0x49
 1852 0047 13       		.uleb128 0x13
 1853 0048 00       		.byte	0
 1854 0049 00       		.byte	0
 1855 004a 07       		.uleb128 0x7
 1856 004b 2E       		.uleb128 0x2e
 1857 004c 00       		.byte	0
 1858 004d 3F       		.uleb128 0x3f
 1859 004e 19       		.uleb128 0x19
 1860 004f 03       		.uleb128 0x3
 1861 0050 0E       		.uleb128 0xe
 1862 0051 3A       		.uleb128 0x3a
 1863 0052 0B       		.uleb128 0xb
 1864 0053 3B       		.uleb128 0x3b
 1865 0054 0B       		.uleb128 0xb
 1866 0055 27       		.uleb128 0x27
 1867 0056 19       		.uleb128 0x19
 1868 0057 11       		.uleb128 0x11
 1869 0058 01       		.uleb128 0x1
 1870 0059 12       		.uleb128 0x12
 1871 005a 06       		.uleb128 0x6
 1872 005b 40       		.uleb128 0x40
 1873 005c 18       		.uleb128 0x18
 1874 005d 9642     		.uleb128 0x2116
 1875 005f 19       		.uleb128 0x19
 1876 0060 00       		.byte	0
 1877 0061 00       		.byte	0
 1878 0062 08       		.uleb128 0x8
 1879 0063 2E       		.uleb128 0x2e
 1880 0064 01       		.byte	0x1
 1881 0065 3F       		.uleb128 0x3f
 1882 0066 19       		.uleb128 0x19
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 49


 1883 0067 03       		.uleb128 0x3
 1884 0068 0E       		.uleb128 0xe
 1885 0069 3A       		.uleb128 0x3a
 1886 006a 0B       		.uleb128 0xb
 1887 006b 3B       		.uleb128 0x3b
 1888 006c 0B       		.uleb128 0xb
 1889 006d 27       		.uleb128 0x27
 1890 006e 19       		.uleb128 0x19
 1891 006f 11       		.uleb128 0x11
 1892 0070 01       		.uleb128 0x1
 1893 0071 12       		.uleb128 0x12
 1894 0072 06       		.uleb128 0x6
 1895 0073 40       		.uleb128 0x40
 1896 0074 18       		.uleb128 0x18
 1897 0075 9642     		.uleb128 0x2116
 1898 0077 19       		.uleb128 0x19
 1899 0078 01       		.uleb128 0x1
 1900 0079 13       		.uleb128 0x13
 1901 007a 00       		.byte	0
 1902 007b 00       		.byte	0
 1903 007c 09       		.uleb128 0x9
 1904 007d 34       		.uleb128 0x34
 1905 007e 00       		.byte	0
 1906 007f 03       		.uleb128 0x3
 1907 0080 0E       		.uleb128 0xe
 1908 0081 3A       		.uleb128 0x3a
 1909 0082 0B       		.uleb128 0xb
 1910 0083 3B       		.uleb128 0x3b
 1911 0084 0B       		.uleb128 0xb
 1912 0085 49       		.uleb128 0x49
 1913 0086 13       		.uleb128 0x13
 1914 0087 02       		.uleb128 0x2
 1915 0088 18       		.uleb128 0x18
 1916 0089 00       		.byte	0
 1917 008a 00       		.byte	0
 1918 008b 0A       		.uleb128 0xa
 1919 008c 2E       		.uleb128 0x2e
 1920 008d 00       		.byte	0
 1921 008e 3F       		.uleb128 0x3f
 1922 008f 19       		.uleb128 0x19
 1923 0090 03       		.uleb128 0x3
 1924 0091 0E       		.uleb128 0xe
 1925 0092 3A       		.uleb128 0x3a
 1926 0093 0B       		.uleb128 0xb
 1927 0094 3B       		.uleb128 0x3b
 1928 0095 05       		.uleb128 0x5
 1929 0096 27       		.uleb128 0x27
 1930 0097 19       		.uleb128 0x19
 1931 0098 11       		.uleb128 0x11
 1932 0099 01       		.uleb128 0x1
 1933 009a 12       		.uleb128 0x12
 1934 009b 06       		.uleb128 0x6
 1935 009c 40       		.uleb128 0x40
 1936 009d 18       		.uleb128 0x18
 1937 009e 9642     		.uleb128 0x2116
 1938 00a0 19       		.uleb128 0x19
 1939 00a1 00       		.byte	0
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 50


 1940 00a2 00       		.byte	0
 1941 00a3 0B       		.uleb128 0xb
 1942 00a4 2E       		.uleb128 0x2e
 1943 00a5 00       		.byte	0
 1944 00a6 3F       		.uleb128 0x3f
 1945 00a7 19       		.uleb128 0x19
 1946 00a8 03       		.uleb128 0x3
 1947 00a9 0E       		.uleb128 0xe
 1948 00aa 3A       		.uleb128 0x3a
 1949 00ab 0B       		.uleb128 0xb
 1950 00ac 3B       		.uleb128 0x3b
 1951 00ad 05       		.uleb128 0x5
 1952 00ae 27       		.uleb128 0x27
 1953 00af 19       		.uleb128 0x19
 1954 00b0 11       		.uleb128 0x11
 1955 00b1 01       		.uleb128 0x1
 1956 00b2 12       		.uleb128 0x12
 1957 00b3 06       		.uleb128 0x6
 1958 00b4 40       		.uleb128 0x40
 1959 00b5 18       		.uleb128 0x18
 1960 00b6 9742     		.uleb128 0x2117
 1961 00b8 19       		.uleb128 0x19
 1962 00b9 00       		.byte	0
 1963 00ba 00       		.byte	0
 1964 00bb 0C       		.uleb128 0xc
 1965 00bc 2E       		.uleb128 0x2e
 1966 00bd 01       		.byte	0x1
 1967 00be 3F       		.uleb128 0x3f
 1968 00bf 19       		.uleb128 0x19
 1969 00c0 03       		.uleb128 0x3
 1970 00c1 0E       		.uleb128 0xe
 1971 00c2 3A       		.uleb128 0x3a
 1972 00c3 0B       		.uleb128 0xb
 1973 00c4 3B       		.uleb128 0x3b
 1974 00c5 05       		.uleb128 0x5
 1975 00c6 27       		.uleb128 0x27
 1976 00c7 19       		.uleb128 0x19
 1977 00c8 49       		.uleb128 0x49
 1978 00c9 13       		.uleb128 0x13
 1979 00ca 11       		.uleb128 0x11
 1980 00cb 01       		.uleb128 0x1
 1981 00cc 12       		.uleb128 0x12
 1982 00cd 06       		.uleb128 0x6
 1983 00ce 40       		.uleb128 0x40
 1984 00cf 18       		.uleb128 0x18
 1985 00d0 9742     		.uleb128 0x2117
 1986 00d2 19       		.uleb128 0x19
 1987 00d3 01       		.uleb128 0x1
 1988 00d4 13       		.uleb128 0x13
 1989 00d5 00       		.byte	0
 1990 00d6 00       		.byte	0
 1991 00d7 0D       		.uleb128 0xd
 1992 00d8 05       		.uleb128 0x5
 1993 00d9 00       		.byte	0
 1994 00da 03       		.uleb128 0x3
 1995 00db 0E       		.uleb128 0xe
 1996 00dc 3A       		.uleb128 0x3a
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 51


 1997 00dd 0B       		.uleb128 0xb
 1998 00de 3B       		.uleb128 0x3b
 1999 00df 05       		.uleb128 0x5
 2000 00e0 49       		.uleb128 0x49
 2001 00e1 13       		.uleb128 0x13
 2002 00e2 02       		.uleb128 0x2
 2003 00e3 18       		.uleb128 0x18
 2004 00e4 00       		.byte	0
 2005 00e5 00       		.byte	0
 2006 00e6 0E       		.uleb128 0xe
 2007 00e7 34       		.uleb128 0x34
 2008 00e8 00       		.byte	0
 2009 00e9 03       		.uleb128 0x3
 2010 00ea 0E       		.uleb128 0xe
 2011 00eb 3A       		.uleb128 0x3a
 2012 00ec 0B       		.uleb128 0xb
 2013 00ed 3B       		.uleb128 0x3b
 2014 00ee 05       		.uleb128 0x5
 2015 00ef 49       		.uleb128 0x49
 2016 00f0 13       		.uleb128 0x13
 2017 00f1 02       		.uleb128 0x2
 2018 00f2 18       		.uleb128 0x18
 2019 00f3 00       		.byte	0
 2020 00f4 00       		.byte	0
 2021 00f5 0F       		.uleb128 0xf
 2022 00f6 2E       		.uleb128 0x2e
 2023 00f7 01       		.byte	0x1
 2024 00f8 3F       		.uleb128 0x3f
 2025 00f9 19       		.uleb128 0x19
 2026 00fa 03       		.uleb128 0x3
 2027 00fb 0E       		.uleb128 0xe
 2028 00fc 3A       		.uleb128 0x3a
 2029 00fd 0B       		.uleb128 0xb
 2030 00fe 3B       		.uleb128 0x3b
 2031 00ff 05       		.uleb128 0x5
 2032 0100 27       		.uleb128 0x27
 2033 0101 19       		.uleb128 0x19
 2034 0102 49       		.uleb128 0x49
 2035 0103 13       		.uleb128 0x13
 2036 0104 11       		.uleb128 0x11
 2037 0105 01       		.uleb128 0x1
 2038 0106 12       		.uleb128 0x12
 2039 0107 06       		.uleb128 0x6
 2040 0108 40       		.uleb128 0x40
 2041 0109 18       		.uleb128 0x18
 2042 010a 9642     		.uleb128 0x2116
 2043 010c 19       		.uleb128 0x19
 2044 010d 01       		.uleb128 0x1
 2045 010e 13       		.uleb128 0x13
 2046 010f 00       		.byte	0
 2047 0110 00       		.byte	0
 2048 0111 10       		.uleb128 0x10
 2049 0112 2E       		.uleb128 0x2e
 2050 0113 01       		.byte	0x1
 2051 0114 3F       		.uleb128 0x3f
 2052 0115 19       		.uleb128 0x19
 2053 0116 03       		.uleb128 0x3
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 52


 2054 0117 0E       		.uleb128 0xe
 2055 0118 3A       		.uleb128 0x3a
 2056 0119 0B       		.uleb128 0xb
 2057 011a 3B       		.uleb128 0x3b
 2058 011b 05       		.uleb128 0x5
 2059 011c 27       		.uleb128 0x27
 2060 011d 19       		.uleb128 0x19
 2061 011e 11       		.uleb128 0x11
 2062 011f 01       		.uleb128 0x1
 2063 0120 12       		.uleb128 0x12
 2064 0121 06       		.uleb128 0x6
 2065 0122 40       		.uleb128 0x40
 2066 0123 18       		.uleb128 0x18
 2067 0124 9742     		.uleb128 0x2117
 2068 0126 19       		.uleb128 0x19
 2069 0127 01       		.uleb128 0x1
 2070 0128 13       		.uleb128 0x13
 2071 0129 00       		.byte	0
 2072 012a 00       		.byte	0
 2073 012b 11       		.uleb128 0x11
 2074 012c 2E       		.uleb128 0x2e
 2075 012d 01       		.byte	0x1
 2076 012e 3F       		.uleb128 0x3f
 2077 012f 19       		.uleb128 0x19
 2078 0130 03       		.uleb128 0x3
 2079 0131 0E       		.uleb128 0xe
 2080 0132 3A       		.uleb128 0x3a
 2081 0133 0B       		.uleb128 0xb
 2082 0134 3B       		.uleb128 0x3b
 2083 0135 05       		.uleb128 0x5
 2084 0136 27       		.uleb128 0x27
 2085 0137 19       		.uleb128 0x19
 2086 0138 11       		.uleb128 0x11
 2087 0139 01       		.uleb128 0x1
 2088 013a 12       		.uleb128 0x12
 2089 013b 06       		.uleb128 0x6
 2090 013c 40       		.uleb128 0x40
 2091 013d 18       		.uleb128 0x18
 2092 013e 9642     		.uleb128 0x2116
 2093 0140 19       		.uleb128 0x19
 2094 0141 01       		.uleb128 0x1
 2095 0142 13       		.uleb128 0x13
 2096 0143 00       		.byte	0
 2097 0144 00       		.byte	0
 2098 0145 12       		.uleb128 0x12
 2099 0146 01       		.uleb128 0x1
 2100 0147 01       		.byte	0x1
 2101 0148 49       		.uleb128 0x49
 2102 0149 13       		.uleb128 0x13
 2103 014a 01       		.uleb128 0x1
 2104 014b 13       		.uleb128 0x13
 2105 014c 00       		.byte	0
 2106 014d 00       		.byte	0
 2107 014e 13       		.uleb128 0x13
 2108 014f 21       		.uleb128 0x21
 2109 0150 00       		.byte	0
 2110 0151 49       		.uleb128 0x49
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 53


 2111 0152 13       		.uleb128 0x13
 2112 0153 2F       		.uleb128 0x2f
 2113 0154 0B       		.uleb128 0xb
 2114 0155 00       		.byte	0
 2115 0156 00       		.byte	0
 2116 0157 14       		.uleb128 0x14
 2117 0158 26       		.uleb128 0x26
 2118 0159 00       		.byte	0
 2119 015a 49       		.uleb128 0x49
 2120 015b 13       		.uleb128 0x13
 2121 015c 00       		.byte	0
 2122 015d 00       		.byte	0
 2123 015e 15       		.uleb128 0x15
 2124 015f 34       		.uleb128 0x34
 2125 0160 00       		.byte	0
 2126 0161 03       		.uleb128 0x3
 2127 0162 0E       		.uleb128 0xe
 2128 0163 3A       		.uleb128 0x3a
 2129 0164 0B       		.uleb128 0xb
 2130 0165 3B       		.uleb128 0x3b
 2131 0166 0B       		.uleb128 0xb
 2132 0167 49       		.uleb128 0x49
 2133 0168 13       		.uleb128 0x13
 2134 0169 3F       		.uleb128 0x3f
 2135 016a 19       		.uleb128 0x19
 2136 016b 02       		.uleb128 0x2
 2137 016c 18       		.uleb128 0x18
 2138 016d 00       		.byte	0
 2139 016e 00       		.byte	0
 2140 016f 00       		.byte	0
 2141              		.section	.debug_aranges,"",%progbits
 2142 0000 A4000000 		.4byte	0xa4
 2143 0004 0200     		.2byte	0x2
 2144 0006 00000000 		.4byte	.Ldebug_info0
 2145 000a 04       		.byte	0x4
 2146 000b 00       		.byte	0
 2147 000c 0000     		.2byte	0
 2148 000e 0000     		.2byte	0
 2149 0010 00000000 		.4byte	.LFB2
 2150 0014 24000000 		.4byte	.LFE2-.LFB2
 2151 0018 00000000 		.4byte	.LFB3
 2152 001c D8010000 		.4byte	.LFE3-.LFB3
 2153 0020 00000000 		.4byte	.LFB4
 2154 0024 38000000 		.4byte	.LFE4-.LFB4
 2155 0028 00000000 		.4byte	.LFB5
 2156 002c 18000000 		.4byte	.LFE5-.LFB5
 2157 0030 00000000 		.4byte	.LFB6
 2158 0034 14000000 		.4byte	.LFE6-.LFB6
 2159 0038 00000000 		.4byte	.LFB7
 2160 003c 08000000 		.4byte	.LFE7-.LFB7
 2161 0040 00000000 		.4byte	.LFB8
 2162 0044 48000000 		.4byte	.LFE8-.LFB8
 2163 0048 00000000 		.4byte	.LFB9
 2164 004c 44000000 		.4byte	.LFE9-.LFB9
 2165 0050 00000000 		.4byte	.LFB10
 2166 0054 1C000000 		.4byte	.LFE10-.LFB10
 2167 0058 00000000 		.4byte	.LFB11
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 54


 2168 005c 30000000 		.4byte	.LFE11-.LFB11
 2169 0060 00000000 		.4byte	.LFB12
 2170 0064 2C000000 		.4byte	.LFE12-.LFB12
 2171 0068 00000000 		.4byte	.LFB13
 2172 006c 1C000000 		.4byte	.LFE13-.LFB13
 2173 0070 00000000 		.4byte	.LFB14
 2174 0074 1C000000 		.4byte	.LFE14-.LFB14
 2175 0078 00000000 		.4byte	.LFB15
 2176 007c 30000000 		.4byte	.LFE15-.LFB15
 2177 0080 00000000 		.4byte	.LFB16
 2178 0084 2C000000 		.4byte	.LFE16-.LFB16
 2179 0088 00000000 		.4byte	.LFB17
 2180 008c A4000000 		.4byte	.LFE17-.LFB17
 2181 0090 00000000 		.4byte	.LFB18
 2182 0094 98000000 		.4byte	.LFE18-.LFB18
 2183 0098 00000000 		.4byte	.LFB19
 2184 009c 80000000 		.4byte	.LFE19-.LFB19
 2185 00a0 00000000 		.4byte	0
 2186 00a4 00000000 		.4byte	0
 2187              		.section	.debug_ranges,"",%progbits
 2188              	.Ldebug_ranges0:
 2189 0000 00000000 		.4byte	.LFB2
 2190 0004 24000000 		.4byte	.LFE2
 2191 0008 00000000 		.4byte	.LFB3
 2192 000c D8010000 		.4byte	.LFE3
 2193 0010 00000000 		.4byte	.LFB4
 2194 0014 38000000 		.4byte	.LFE4
 2195 0018 00000000 		.4byte	.LFB5
 2196 001c 18000000 		.4byte	.LFE5
 2197 0020 00000000 		.4byte	.LFB6
 2198 0024 14000000 		.4byte	.LFE6
 2199 0028 00000000 		.4byte	.LFB7
 2200 002c 08000000 		.4byte	.LFE7
 2201 0030 00000000 		.4byte	.LFB8
 2202 0034 48000000 		.4byte	.LFE8
 2203 0038 00000000 		.4byte	.LFB9
 2204 003c 44000000 		.4byte	.LFE9
 2205 0040 00000000 		.4byte	.LFB10
 2206 0044 1C000000 		.4byte	.LFE10
 2207 0048 00000000 		.4byte	.LFB11
 2208 004c 30000000 		.4byte	.LFE11
 2209 0050 00000000 		.4byte	.LFB12
 2210 0054 2C000000 		.4byte	.LFE12
 2211 0058 00000000 		.4byte	.LFB13
 2212 005c 1C000000 		.4byte	.LFE13
 2213 0060 00000000 		.4byte	.LFB14
 2214 0064 1C000000 		.4byte	.LFE14
 2215 0068 00000000 		.4byte	.LFB15
 2216 006c 30000000 		.4byte	.LFE15
 2217 0070 00000000 		.4byte	.LFB16
 2218 0074 2C000000 		.4byte	.LFE16
 2219 0078 00000000 		.4byte	.LFB17
 2220 007c A4000000 		.4byte	.LFE17
 2221 0080 00000000 		.4byte	.LFB18
 2222 0084 98000000 		.4byte	.LFE18
 2223 0088 00000000 		.4byte	.LFB19
 2224 008c 80000000 		.4byte	.LFE19
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 55


 2225 0090 00000000 		.4byte	0
 2226 0094 00000000 		.4byte	0
 2227              		.section	.debug_line,"",%progbits
 2228              	.Ldebug_line0:
 2229 0000 80020000 		.section	.debug_str,"MS",%progbits,1
 2229      02004200 
 2229      00000201 
 2229      FB0E0D00 
 2229      01010101 
 2230              	.LASF6:
 2231 0000 6C6F6E67 		.ascii	"long long int\000"
 2231      206C6F6E 
 2231      6720696E 
 2231      7400
 2232              	.LASF55:
 2233 000e 4144435F 		.ascii	"ADC_channelsConfig\000"
 2233      6368616E 
 2233      6E656C73 
 2233      436F6E66 
 2233      696700
 2234              	.LASF19:
 2235 0021 72656733 		.ascii	"reg32\000"
 2235      3200
 2236              	.LASF60:
 2237 0027 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC.c\000"
 2237      6E657261 
 2237      7465645F 
 2237      536F7572 
 2237      63655C50 
 2238              	.LASF45:
 2239 0046 6F666673 		.ascii	"offset\000"
 2239      657400
 2240              	.LASF15:
 2241 004d 666C6F61 		.ascii	"float\000"
 2241      7400
 2242              	.LASF41:
 2243 0053 68696768 		.ascii	"highLimit\000"
 2243      4C696D69 
 2243      7400
 2244              	.LASF61:
 2245 005d 433A5C55 		.ascii	"C:\\Users\\jdmoussa\\Documents\\PSoC Creator\\BLE_B"
 2245      73657273 
 2245      5C6A646D 
 2245      6F757373 
 2245      615C446F 
 2246 008b 6C6F6F64 		.ascii	"lood_Pressure_Sensor01\\BLE_Blood_Pressure_Sensor01"
 2246      5F507265 
 2246      73737572 
 2246      655F5365 
 2246      6E736F72 
 2247 00bd 2E637964 		.ascii	".cydsn\000"
 2247      736E00
 2248              	.LASF52:
 2249 00c4 75566F6C 		.ascii	"uVolts\000"
 2249      747300
 2250              	.LASF3:
 2251 00cb 73686F72 		.ascii	"short unsigned int\000"
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 56


 2251      7420756E 
 2251      7369676E 
 2251      65642069 
 2251      6E7400
 2252              	.LASF2:
 2253 00de 73686F72 		.ascii	"short int\000"
 2253      7420696E 
 2253      7400
 2254              	.LASF44:
 2255 00e8 4144435F 		.ascii	"ADC_SetOffset\000"
 2255      5365744F 
 2255      66667365 
 2255      7400
 2256              	.LASF38:
 2257 00f6 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2257      5365744C 
 2257      6F774C69 
 2257      6D697400 
 2258              	.LASF29:
 2259 0106 73746174 		.ascii	"status\000"
 2259      757300
 2260              	.LASF14:
 2261 010d 666C6F61 		.ascii	"float32\000"
 2261      74333200 
 2262              	.LASF57:
 2263 0115 4144435F 		.ascii	"ADC_offset\000"
 2263      6F666673 
 2263      657400
 2264              	.LASF22:
 2265 0120 746D7052 		.ascii	"tmpRegVal\000"
 2265      65675661 
 2265      6C00
 2266              	.LASF46:
 2267 012a 4144435F 		.ascii	"ADC_SetGain\000"
 2267      53657447 
 2267      61696E00 
 2268              	.LASF1:
 2269 0136 756E7369 		.ascii	"unsigned char\000"
 2269      676E6564 
 2269      20636861 
 2269      7200
 2270              	.LASF40:
 2271 0144 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2271      53657448 
 2271      6967684C 
 2271      696D6974 
 2271      00
 2272              	.LASF12:
 2273 0155 696E7431 		.ascii	"int16\000"
 2273      3600
 2274              	.LASF5:
 2275 015b 6C6F6E67 		.ascii	"long unsigned int\000"
 2275      20756E73 
 2275      69676E65 
 2275      6420696E 
 2275      7400
 2276              	.LASF13:
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 57


 2277 016d 696E7433 		.ascii	"int32\000"
 2277      3200
 2278              	.LASF31:
 2279 0173 4144435F 		.ascii	"ADC_GetResult16\000"
 2279      47657452 
 2279      6573756C 
 2279      74313600 
 2280              	.LASF36:
 2281 0183 4144435F 		.ascii	"ADC_SetChanMask\000"
 2281      53657443 
 2281      68616E4D 
 2281      61736B00 
 2282              	.LASF43:
 2283 0193 4144435F 		.ascii	"ADC_SetSatMask\000"
 2283      53657453 
 2283      61744D61 
 2283      736B00
 2284              	.LASF30:
 2285 01a2 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2285      4973456E 
 2285      64436F6E 
 2285      76657273 
 2285      696F6E00 
 2286              	.LASF16:
 2287 01b6 646F7562 		.ascii	"double\000"
 2287      6C6500
 2288              	.LASF39:
 2289 01bd 6C6F774C 		.ascii	"lowLimit\000"
 2289      696D6974 
 2289      00
 2290              	.LASF47:
 2291 01c6 61646347 		.ascii	"adcGain\000"
 2291      61696E00 
 2292              	.LASF10:
 2293 01ce 75696E74 		.ascii	"uint16\000"
 2293      313600
 2294              	.LASF49:
 2295 01d5 61646343 		.ascii	"adcCounts\000"
 2295      6F756E74 
 2295      7300
 2296              	.LASF11:
 2297 01df 75696E74 		.ascii	"uint32\000"
 2297      333200
 2298              	.LASF42:
 2299 01e6 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2299      5365744C 
 2299      696D6974 
 2299      4D61736B 
 2299      00
 2300              	.LASF8:
 2301 01f7 756E7369 		.ascii	"unsigned int\000"
 2301      676E6564 
 2301      20696E74 
 2301      00
 2302              	.LASF25:
 2303 0204 4144435F 		.ascii	"ADC_Enable\000"
 2303      456E6162 
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 58


 2303      6C6500
 2304              	.LASF23:
 2305 020f 636F756E 		.ascii	"counts\000"
 2305      747300
 2306              	.LASF7:
 2307 0216 6C6F6E67 		.ascii	"long long unsigned int\000"
 2307      206C6F6E 
 2307      6720756E 
 2307      7369676E 
 2307      65642069 
 2308              	.LASF34:
 2309 022d 72657375 		.ascii	"result\000"
 2309      6C7400
 2310              	.LASF24:
 2311 0234 4144435F 		.ascii	"ADC_Start\000"
 2311      53746172 
 2311      7400
 2312              	.LASF35:
 2313 023e 4144435F 		.ascii	"ADC_Init\000"
 2313      496E6974 
 2313      00
 2314              	.LASF54:
 2315 0247 766F6C74 		.ascii	"volts\000"
 2315      7300
 2316              	.LASF33:
 2317 024d 6368616E 		.ascii	"chan\000"
 2317      00
 2318              	.LASF50:
 2319 0252 6D566F6C 		.ascii	"mVolts\000"
 2319      747300
 2320              	.LASF20:
 2321 0259 73697A65 		.ascii	"sizetype\000"
 2321      74797065 
 2321      00
 2322              	.LASF51:
 2323 0262 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2323      436F756E 
 2323      7473546F 
 2323      5F75566F 
 2323      6C747300 
 2324              	.LASF53:
 2325 0276 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2325      436F756E 
 2325      7473546F 
 2325      5F566F6C 
 2325      747300
 2326              	.LASF27:
 2327 0289 4144435F 		.ascii	"ADC_StartConvert\000"
 2327      53746172 
 2327      74436F6E 
 2327      76657274 
 2327      00
 2328              	.LASF37:
 2329 029a 6D61736B 		.ascii	"mask\000"
 2329      00
 2330              	.LASF21:
 2331 029f 63684E75 		.ascii	"chNum\000"
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 59


 2331      6D00
 2332              	.LASF32:
 2333 02a5 7265744D 		.ascii	"retMode\000"
 2333      6F646500 
 2334              	.LASF28:
 2335 02ad 4144435F 		.ascii	"ADC_StopConvert\000"
 2335      53746F70 
 2335      436F6E76 
 2335      65727400 
 2336              	.LASF9:
 2337 02bd 75696E74 		.ascii	"uint8\000"
 2337      3800
 2338              	.LASF58:
 2339 02c3 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2339      636F756E 
 2339      74735065 
 2339      72313056 
 2339      6F6C7400 
 2340              	.LASF48:
 2341 02d7 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2341      436F756E 
 2341      7473546F 
 2341      5F6D566F 
 2341      6C747300 
 2342              	.LASF4:
 2343 02eb 6C6F6E67 		.ascii	"long int\000"
 2343      20696E74 
 2343      00
 2344              	.LASF18:
 2345 02f4 63686172 		.ascii	"char\000"
 2345      00
 2346              	.LASF0:
 2347 02f9 7369676E 		.ascii	"signed char\000"
 2347      65642063 
 2347      68617200 
 2348              	.LASF56:
 2349 0305 4144435F 		.ascii	"ADC_initVar\000"
 2349      696E6974 
 2349      56617200 
 2350              	.LASF59:
 2351 0311 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2351      4320342E 
 2351      382E3420 
 2351      32303134 
 2351      30353236 
 2352 0344 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2352      20726576 
 2352      6973696F 
 2352      6E203231 
 2352      31333538 
 2353 0377 30202D66 		.ascii	"0 -ffunction-sections\000"
 2353      66756E63 
 2353      74696F6E 
 2353      2D736563 
 2353      74696F6E 
 2354              	.LASF17:
 2355 038d 696E7436 		.ascii	"int64\000"
ARM GAS  C:\Users\jdmoussa\AppData\Local\Temp\cc1E7Tls.s 			page 60


 2355      3400
 2356              	.LASF26:
 2357 0393 4144435F 		.ascii	"ADC_Stop\000"
 2357      53746F70 
 2357      00
 2358              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
